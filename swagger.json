{
  "openapi": "3.0.3",
  "info": {
    "title": "CoScene OpenAPI",
    "version": "v20221112-d30039e"
  },
  "paths": {
    "/dataplatform/v1alpha2/devices": {
      "get": {
        "tags": [
          "DeviceService"
        ],
        "description": "List Devices.",
        "operationId": "DeviceService_ListDevices",
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The parent to list devices from. Format: If it's empty, it means to list all devices from an organization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Requested page size. Server may return fewer than requested. If unspecified, at most 20 devices will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A token identifying a page of results the server should return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The skip value refer to the number of individual resources to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "An expression for filtering the results of the request. just camel supported Example: list devices by device display name, filter=display_name=abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "An expression for sorting the results of the request. camel or lower_underscore both supported supported fields are same as filter's",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDevicesResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DeviceService"
        ],
        "description": "Create a device.",
        "operationId": "DeviceService_CreateDevice",
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The parent to create device from. Format:    Empty string means creating an organization-level device.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Device"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/devices/{device}": {
      "get": {
        "tags": [
          "DeviceService"
        ],
        "description": "Retrieve a device.",
        "operationId": "DeviceService_GetDevice",
        "parameters": [
          {
            "name": "device",
            "in": "path",
            "description": "The device id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DeviceService"
        ],
        "description": "Delete a device.",
        "operationId": "DeviceService_DeleteDevice",
        "parameters": [
          {
            "name": "device",
            "in": "path",
            "description": "The device id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "DeviceService"
        ],
        "description": "Update a device.",
        "operationId": "DeviceService_UpdateDevice",
        "parameters": [
          {
            "name": "device",
            "in": "path",
            "description": "The device id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMask",
            "in": "query",
            "description": "The fields to update.",
            "schema": {
              "type": "string",
              "format": "field-mask"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Device"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/records": {
      "get": {
        "tags": [
          "RecordService"
        ],
        "description": "List records.",
        "operationId": "RecordService_ListRecords",
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The parent to list records from. If it's empty, it means to list all records from all warehouses in the organization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Requested page size. Server may return fewer than requested. If unspecified, at most 20 records will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A token identifying a page of results the server should return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The skip value refer to the number of individual resources to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "An expression for filtering the results of the request. camel or lower_underscore both supported supported fields: title, description, createTime, updateTime, warehouseId, projectId, deviceId, metadata->${key}, head, startTime, endTime album.id, event.id support json fields to use or condition query: labels. Example: labels=[label_id_1,label_id_2,...]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "An expression for sorting the results of the request. camel or lower_underscore both supported supported fields are same as filter's",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListRecordsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/*/tasks": {
      "get": {
        "tags": [
          "TaskService"
        ],
        "description": "List Tasks.",
        "operationId": "TaskService_ListTasks",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Requested page size. Server may return fewer than requested. If unspecified, at most 20 tasks will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A token identifying a page of results the server should return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The skip value refer to the number of individual resources to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "An expression for filtering the results of the request. just camel supported example1: list tasks by task state  filter=state=abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "An expression for sorting the results of the request. camel or lower_underscore both supported supported fields are same as filter's",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTasksResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/blobs/{blob}/media:refresh": {
      "post": {
        "tags": [
          "BlobService"
        ],
        "description": "Update blob's media&media type and associated files' media and media type. Client can update blob's state with it.",
        "operationId": "BlobService_RefreshBlobMedia",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blob",
            "in": "path",
            "description": "The blob id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshBlobMediaRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/projects/{project}/events": {
      "get": {
        "tags": [
          "EventService"
        ],
        "description": "List events.",
        "operationId": "EventService_ListEvents",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Requested page size. Server may return fewer than requested. If unspecified, at most 20 events will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A token identifying a page of results the server should return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The skip value refer to the number of individual resources to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "An expression for filtering the results of the request. Supported filter: displayName, triggerTime, createTime, updateTime, duration, description. You can list events by specified ids, Example: in record detail page, you can append id=[aaa,bbb,ccc] on filter=xxx, aaa means event id in returned record.eventList. You can also list events by append `record.id=xxx` on the end of filter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "An expression for sorting the results of the request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListEventsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "EventService"
        ],
        "description": "Create an event.",
        "operationId": "EventService_CreateEvent",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "record",
            "in": "query",
            "description": "The record name to create event, if set record name, the event have bind to the record. If the record name is empty, the event is independent.  Non-standard field.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Event"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/projects/{project}/events/{event}": {
      "get": {
        "tags": [
          "EventService"
        ],
        "description": "Retrieve an event.",
        "operationId": "EventService_GetEvent",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event",
            "in": "path",
            "description": "The event id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "EventService"
        ],
        "description": "Delete an event.",
        "operationId": "EventService_DeleteEvent",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event",
            "in": "path",
            "description": "The event id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "EventService"
        ],
        "description": "Update an event.",
        "operationId": "EventService_UpdateEvent",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event",
            "in": "path",
            "description": "The event id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMask",
            "in": "query",
            "description": "The fields to update.",
            "schema": {
              "type": "string",
              "format": "field-mask"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Event"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/projects/{project}/records": {
      "post": {
        "tags": [
          "RecordService"
        ],
        "description": "Create a record. Support creating blobs and the head revision at same time during creating the record.",
        "operationId": "RecordService_CreateRecord",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Record"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Record"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/projects/{project}/records/{record}": {
      "get": {
        "tags": [
          "RecordService"
        ],
        "description": "Retrieve a record.",
        "operationId": "RecordService_GetRecord",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "record",
            "in": "path",
            "description": "The record id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Record"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "RecordService"
        ],
        "description": "Delete a record and all resources(revisions, files and etc.) under it.",
        "operationId": "RecordService_DeleteRecord",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "record",
            "in": "path",
            "description": "The record id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "RecordService"
        ],
        "description": "Update a record.",
        "operationId": "RecordService_UpdateRecord",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "record",
            "in": "path",
            "description": "The record id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMask",
            "in": "query",
            "description": "The fields to update.",
            "schema": {
              "type": "string",
              "format": "field-mask"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Record"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Record"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/projects/{project}/records/{record}/blobs/{blob}": {
      "get": {
        "tags": [
          "BlobService"
        ],
        "description": "Get a blob by resource name.",
        "operationId": "BlobService_GetBlob",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "record",
            "in": "path",
            "description": "The record id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blob",
            "in": "path",
            "description": "The blob id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Blob"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BlobService"
        ],
        "description": "Delete blob by resource name.",
        "operationId": "BlobService_DeleteBlob",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "record",
            "in": "path",
            "description": "The record id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blob",
            "in": "path",
            "description": "The blob id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "BlobService"
        ],
        "description": "Update blob's state. Client can update blob's state with it.",
        "operationId": "BlobService_UpdateBlob",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "record",
            "in": "path",
            "description": "The record id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blob",
            "in": "path",
            "description": "The blob id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMask",
            "in": "query",
            "description": "The fields to update.",
            "schema": {
              "type": "string",
              "format": "field-mask"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Blob"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Blob"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/projects/{project}/records/{record}/blobs/{blob}:generateDownloadUrl": {
      "post": {
        "tags": [
          "BlobService"
        ],
        "description": "Generate pre-sign URL to download blob.",
        "operationId": "BlobService_GenerateDownloadUrl",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "record",
            "in": "path",
            "description": "The record id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blob",
            "in": "path",
            "description": "The blob id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateDownloadUrlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateDownloadUrlResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/projects/{project}/records/{record}/blobs/{blob}:generateUploadUrl": {
      "post": {
        "tags": [
          "BlobService"
        ],
        "description": "Generate pre-sign URL to upload blob.",
        "operationId": "BlobService_GenerateUploadUrl",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "record",
            "in": "path",
            "description": "The record id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blob",
            "in": "path",
            "description": "The blob id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateUploadUrlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateUploadUrlResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/projects/{project}/records/{record}/blobs:batchGet": {
      "get": {
        "tags": [
          "BlobService"
        ],
        "description": "Batch get blobs under parent.",
        "operationId": "BlobService_BatchGetBlobs",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "record",
            "in": "path",
            "description": "The record id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchGetBlobsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/projects/{project}/records/{record}/files": {
      "get": {
        "tags": [
          "FileService"
        ],
        "description": "List files in a record/revision.",
        "operationId": "FileService_ListFiles",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "record",
            "in": "path",
            "description": "The record id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Requested page size. Server may return fewer than requested. If unspecified, at most 20 records will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A token identifying a page of results the server should return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The skip value refer to the number of individual resources to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "An expression for filtering the results of the request.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "An expression for sorting the results of the request. camel or lower_underscore both supported supported fields are same as filter's",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFilesResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "FileService"
        ],
        "description": "Create a file to a record. If you want to create many files to a record, create a new revision instead.",
        "operationId": "FileService_CreateFile",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "record",
            "in": "path",
            "description": "The record id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/File"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/projects/{project}/records/{record}/files/{file}": {
      "get": {
        "tags": [
          "FileService"
        ],
        "description": "Get a file by resource name.",
        "operationId": "FileService_GetFile",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "record",
            "in": "path",
            "description": "The record id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file",
            "in": "path",
            "description": "The file id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "FileService"
        ],
        "description": "Delete a file from a record's head revision.",
        "operationId": "FileService_DeleteFile",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "record",
            "in": "path",
            "description": "The record id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file",
            "in": "path",
            "description": "The file id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/projects/{project}/records/{record}/revisions": {
      "get": {
        "tags": [
          "RevisionService"
        ],
        "description": "List revisions.",
        "operationId": "RevisionService_ListRevisions",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "record",
            "in": "path",
            "description": "The record id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Requested page size. Server may return fewer than requested. If unspecified, at most 20 revisions will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A token identifying a page of results the server should return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The skip value refer to the number of individual resources to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "An expression for filtering the results of the request.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "An expression for sorting the results of the request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListRevisionsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/projects/{project}/records/{record}/revisions/{revision}": {
      "get": {
        "tags": [
          "RevisionService"
        ],
        "description": "Retrieve a revision.",
        "operationId": "RevisionService_GetRevision",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "record",
            "in": "path",
            "description": "The record id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revision",
            "in": "path",
            "description": "The revision id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Revision"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/projects/{project}/records/{record}/revisions:generate": {
      "post": {
        "tags": [
          "RevisionService"
        ],
        "description": "Create a revision.",
        "operationId": "RevisionService_GenerateRevision",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "record",
            "in": "path",
            "description": "The record id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateRevisionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Revision"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/projects/{project}/records/{record}/tags": {
      "get": {
        "tags": [
          "TagService"
        ],
        "description": "List tags.",
        "operationId": "TagService_ListTags",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "record",
            "in": "path",
            "description": "The record id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Requested page size. Server may return fewer than requested. If unspecified, at most 20 tags will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A token identifying a page of results the server should return.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The skip value refer to the number of individual resources to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "An expression for filtering the results of the request. Supported filter: title, description, create_time, createTime, user, workflow, device, sha256(tag sha256).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "An expression for sorting the results of the request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTagsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TagService"
        ],
        "description": "Create a tag.",
        "operationId": "TagService_CreateTag",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "record",
            "in": "path",
            "description": "The record id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/projects/{project}/records/{record}/tags/{tag}": {
      "get": {
        "tags": [
          "TagService"
        ],
        "description": "Retrieve a tag.",
        "operationId": "TagService_GetTag",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "record",
            "in": "path",
            "description": "The record id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "path",
            "description": "The tag id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TagService"
        ],
        "description": "Delete a tag.",
        "operationId": "TagService_DeleteTag",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "record",
            "in": "path",
            "description": "The record id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "path",
            "description": "The tag id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/projects/{project}/records/{record}:batchGenerateUploadUrls": {
      "post": {
        "tags": [
          "BlobService"
        ],
        "description": "Batch generate pre-sign URL to upload blob.\n (-- api-linter: core::0136::http-parent-variable=disabled\n     aip.dev/not-precedent: Need `parent` technically. --)",
        "operationId": "BlobService_BatchGenerateUploadUrls",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "record",
            "in": "path",
            "description": "The record id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchGenerateUploadUrlsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchGenerateUploadUrlsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/projects/{project}/records/{record}:generateRecordThumbnailUploadUrl": {
      "post": {
        "tags": [
          "RecordService"
        ],
        "description": "Generate upload url for record thumbnails",
        "operationId": "RecordService_GenerateRecordThumbnailUploadUrl",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "record",
            "in": "path",
            "description": "The record id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateRecordThumbnailUploadUrlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateRecordThumbnailUploadUrlResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/projects/{project}/records:batchArchive": {
      "post": {
        "tags": [
          "RecordService"
        ],
        "description": "Batch archive records.",
        "operationId": "RecordService_BatchArchiveRecords",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchArchiveRecordsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/projects/{project}/records:batchUnarchive": {
      "post": {
        "tags": [
          "RecordService"
        ],
        "description": "Batch unarchive records.",
        "operationId": "RecordService_BatchUnarchiveRecords",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchUnarchiveRecordsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/projects/{project}/records:copy": {
      "post": {
        "tags": [
          "RecordService"
        ],
        "description": "Copy records to another project.",
        "operationId": "RecordService_CopyRecords",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CopyRecordsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CopyRecordsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/projects/{project}/records:merge": {
      "post": {
        "tags": [
          "RecordService"
        ],
        "description": "Merge several records into a new one.\n The new record has the largest time interval:\n [min(record1.start_time, ... , recordi.start_time), max(record1.end_time, ... , recordi.end_time)]\n files with same name will be distinguished by a new name with format:\n {origin name}-{record id prefix}.{file type}",
        "operationId": "RecordService_MergeRecords",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MergeRecordsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRecordsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/projects/{project}/records:stat": {
      "post": {
        "tags": [
          "RecordService"
        ],
        "description": "statistic records.",
        "operationId": "RecordService_StatRecords",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatRecordsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatRecordsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/projects/{project}/records:suggestRecordsSearch": {
      "post": {
        "tags": [
          "RecordService"
        ],
        "description": "suggest records keywords when searching",
        "operationId": "RecordService_SuggestRecordsSearch",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuggestRecordsSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestRecordsSearchResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/projects/{project}/tasks": {
      "post": {
        "tags": [
          "TaskService"
        ],
        "description": "Create a task.\n After created, the task will be in the \"unassigned\" state.",
        "operationId": "TaskService_CreateTask",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/dataplatform/v1alpha2/warehouses/{warehouse}/projects/{project}/tasks/{task}": {
      "get": {
        "tags": [
          "TaskService"
        ],
        "description": "Retrieve a task.",
        "operationId": "TaskService_GetTask",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task",
            "in": "path",
            "description": "The task id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TaskService"
        ],
        "description": "Delete a task.",
        "operationId": "TaskService_DeleteTask",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task",
            "in": "path",
            "description": "The task id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "TaskService"
        ],
        "description": "Update a task.",
        "operationId": "TaskService_UpdateTask",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "The warehouse id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task",
            "in": "path",
            "description": "The task id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMask",
            "in": "query",
            "description": "The fields to update.",
            "schema": {
              "type": "string",
              "format": "field-mask"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AWSElasticBlockStoreVolumeSource": {
        "type": "object",
        "properties": {
          "volumeID": {
            "type": "string",
            "description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
          },
          "fsType": {
            "type": "string",
            "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine +optional"
          },
          "partition": {
            "type": "integer",
            "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). +optional",
            "format": "int32"
          },
          "readOnly": {
            "type": "boolean",
            "description": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore +optional"
          }
        },
        "description": "Represents a Persistent Disk resource in AWS. An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling."
      },
      "Affinity": {
        "type": "object",
        "properties": {
          "nodeAffinity": {
            "$ref": "#/components/schemas/NodeAffinity"
          },
          "podAffinity": {
            "$ref": "#/components/schemas/PodAffinity"
          },
          "podAntiAffinity": {
            "$ref": "#/components/schemas/PodAntiAffinity"
          }
        },
        "description": "Affinity is a group of affinity scheduling rules."
      },
      "Amount": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        },
        "description": "Amount represent a numeric amount. +kubebuilder:validation:Type=number"
      },
      "ArchiveStrategy": {
        "type": "object",
        "properties": {
          "tar": {
            "$ref": "#/components/schemas/TarStrategy"
          },
          "none": {
            "$ref": "#/components/schemas/NoneStrategy"
          },
          "zip": {
            "$ref": "#/components/schemas/ZipStrategy"
          }
        },
        "description": "ArchiveStrategy describes how to archive files/directory when saving artifacts"
      },
      "Arguments": {
        "type": "object",
        "properties": {
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Parameter"
            },
            "description": "Parameters is the list of parameters to pass to the template or workflow +patchStrategy=merge +patchMergeKey=name"
          },
          "artifacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Artifact"
            },
            "description": "Artifacts is the list of artifacts to pass to the template or workflow +patchStrategy=merge +patchMergeKey=name"
          }
        },
        "description": "Arguments to a template"
      },
      "Artifact": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the artifact. must be unique within a template's inputs/outputs."
          },
          "path": {
            "type": "string",
            "description": "Path is the container path to the artifact"
          },
          "mode": {
            "type": "integer",
            "description": "mode bits to use on this file, must be a value between 0 and 0777 set when loading input artifacts.",
            "format": "int32"
          },
          "from": {
            "type": "string",
            "description": "From allows an artifact to reference an artifact from a previous step"
          },
          "artifactLocation": {
            "$ref": "#/components/schemas/ArtifactLocation"
          },
          "globalName": {
            "type": "string",
            "description": "GlobalName exports an output artifact to the global scope, making it available as '{{workflow.outputs.artifacts.XXXX}} and in workflow.status.outputs.artifacts"
          },
          "archive": {
            "$ref": "#/components/schemas/ArchiveStrategy"
          },
          "optional": {
            "type": "boolean",
            "description": "Make Artifacts optional, if Artifacts doesn't generate or exist"
          },
          "subPath": {
            "type": "string",
            "description": "SubPath allows an artifact to be sourced from a subpath within the specified source"
          },
          "recurseMode": {
            "type": "boolean",
            "description": "If mode is set, apply the permission recursively into the artifact if it is a folder"
          },
          "fromExpression": {
            "type": "string",
            "description": "FromExpression, if defined, is evaluated to specify the value for the artifact"
          },
          "artifactGC": {
            "$ref": "#/components/schemas/ArtifactGC"
          },
          "deleted": {
            "type": "boolean",
            "description": "Has this been deleted?"
          }
        },
        "description": "Artifact indicates an artifact to place at a specified path"
      },
      "ArtifactGC": {
        "type": "object",
        "properties": {
          "strategy": {
            "type": "string",
            "description": "Strategy is the strategy to use. One of \"OnWorkflowCompletion\", \"OnWorkflowDeletion\" +kubebuilder:validation:Enum=\"\";OnWorkflowCompletion;OnWorkflowDeletion"
          }
        },
        "description": "ArtifactGC describes how to delete artifacts from completed Workflows"
      },
      "ArtifactLocation": {
        "type": "object",
        "properties": {
          "archiveLogs": {
            "type": "boolean",
            "description": "ArchiveLogs indicates if the container logs should be archived"
          },
          "s3": {
            "$ref": "#/components/schemas/S3Artifact"
          },
          "git": {
            "$ref": "#/components/schemas/GitArtifact"
          },
          "http": {
            "$ref": "#/components/schemas/HTTPArtifact"
          },
          "artifactory": {
            "$ref": "#/components/schemas/ArtifactoryArtifact"
          },
          "hdfs": {
            "$ref": "#/components/schemas/HDFSArtifact"
          },
          "raw": {
            "$ref": "#/components/schemas/RawArtifact"
          },
          "oss": {
            "$ref": "#/components/schemas/OSSArtifact"
          },
          "gcs": {
            "$ref": "#/components/schemas/GCSArtifact"
          },
          "azure": {
            "$ref": "#/components/schemas/AzureArtifact"
          }
        },
        "description": "ArtifactLocation describes a location for a single or multiple artifacts. It is used as single artifact in the context of inputs/outputs (e.g. outputs.artifacts.artname). It is also used to describe the location of multiple artifacts such as the archive location of a single workflow step, which the executor will use as a default location to store its files."
      },
      "ArtifactPaths": {
        "type": "object",
        "properties": {
          "artifact": {
            "$ref": "#/components/schemas/Artifact"
          }
        },
        "description": "ArtifactPaths expands a step from a collection of artifacts"
      },
      "ArtifactRepository": {
        "type": "object",
        "properties": {
          "archiveLogs": {
            "type": "boolean",
            "description": "ArchiveLogs enables log archiving"
          },
          "s3": {
            "$ref": "#/components/schemas/S3ArtifactRepository"
          },
          "artifactory": {
            "$ref": "#/components/schemas/ArtifactoryArtifactRepository"
          },
          "hdfs": {
            "$ref": "#/components/schemas/HDFSArtifactRepository"
          },
          "oss": {
            "$ref": "#/components/schemas/OSSArtifactRepository"
          },
          "gcs": {
            "$ref": "#/components/schemas/GCSArtifactRepository"
          },
          "azure": {
            "$ref": "#/components/schemas/AzureArtifactRepository"
          }
        },
        "description": "ArtifactRepository represents an artifact repository in which a controller will store its artifacts"
      },
      "ArtifactRepositoryRef": {
        "type": "object",
        "properties": {
          "configMap": {
            "type": "string",
            "description": "The name of the config map. Defaults to \"artifact-repositories\"."
          },
          "key": {
            "type": "string",
            "description": "The config map key. Defaults to the value of the \"workflows.argoproj.io/default-artifact-repository\" annotation."
          }
        },
        "description": "+protobuf.options.(gogoproto.goproto_stringer)=false"
      },
      "ArtifactRepositoryRefStatus": {
        "type": "object",
        "properties": {
          "artifactRepositoryRef": {
            "$ref": "#/components/schemas/ArtifactRepositoryRef"
          },
          "namespace": {
            "type": "string",
            "description": "The namespace of the config map. Defaults to the workflow's namespace, or the controller's namespace (if found)."
          },
          "default": {
            "type": "boolean",
            "description": "If this ref represents the default artifact repository, rather than a config map."
          },
          "artifactRepository": {
            "$ref": "#/components/schemas/ArtifactRepository"
          }
        },
        "description": "+protobuf.options.(gogoproto.goproto_stringer)=false"
      },
      "ArtifactoryArtifact": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of the artifact"
          },
          "artifactoryAuth": {
            "$ref": "#/components/schemas/ArtifactoryAuth"
          }
        },
        "description": "ArtifactoryArtifact is the location of an artifactory artifact"
      },
      "ArtifactoryArtifactRepository": {
        "type": "object",
        "properties": {
          "artifactoryAuth": {
            "$ref": "#/components/schemas/ArtifactoryAuth"
          },
          "repoURL": {
            "type": "string",
            "description": "RepoURL is the url for artifactory repo."
          }
        },
        "description": "ArtifactoryArtifactRepository defines the controller configuration for an artifactory artifact repository"
      },
      "ArtifactoryAuth": {
        "type": "object",
        "properties": {
          "usernameSecret": {
            "$ref": "#/components/schemas/SecretKeySelector"
          },
          "passwordSecret": {
            "$ref": "#/components/schemas/SecretKeySelector"
          }
        },
        "description": "ArtifactoryAuth describes the secret selectors required for authenticating to artifactory"
      },
      "AttachedVolume": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the attached volume"
          },
          "devicePath": {
            "type": "string",
            "description": "DevicePath represents the device path where the volume should be available"
          }
        },
        "description": "AttachedVolume describes a volume attached to a node"
      },
      "AzureArtifact": {
        "type": "object",
        "properties": {
          "azureBlobContainer": {
            "$ref": "#/components/schemas/AzureBlobContainer"
          },
          "blob": {
            "type": "string",
            "description": "Blob is the blob name (i.e., path) in the container where the artifact resides"
          }
        },
        "description": "AzureArtifact is the location of a an Azure Storage artifact"
      },
      "AzureArtifactRepository": {
        "type": "object",
        "properties": {
          "blobContainer": {
            "$ref": "#/components/schemas/AzureBlobContainer"
          },
          "blobNameFormat": {
            "type": "string",
            "description": "BlobNameFormat is defines the format of how to store blob names. Can reference workflow variables"
          }
        },
        "description": "AzureArtifactRepository defines the controller configuration for an Azure Blob Storage artifact repository"
      },
      "AzureBlobContainer": {
        "type": "object",
        "properties": {
          "endpoint": {
            "type": "string",
            "description": "Endpoint is the service url associated with an account. It is most likely \"https://<ACCOUNT_NAME>.blob.core.windows.net\""
          },
          "container": {
            "type": "string",
            "description": "Container is the container where resources will be stored"
          },
          "accountKeySecret": {
            "$ref": "#/components/schemas/SecretKeySelector"
          },
          "useSDKCreds": {
            "type": "boolean",
            "description": "UseSDKCreds tells the driver to figure out credentials based on sdk defaults."
          }
        },
        "description": "AzureBlobContainer contains the access information for interfacing with an Azure Blob Storage container"
      },
      "AzureDiskVolumeSource": {
        "type": "object",
        "properties": {
          "diskName": {
            "type": "string",
            "description": "The Name of the data disk in the blob storage"
          },
          "diskURI": {
            "type": "string",
            "description": "The URI the data disk in the blob storage"
          },
          "cachingMode": {
            "type": "string",
            "description": "Host Caching mode: None, Read Only, Read Write. +optional"
          },
          "fsType": {
            "type": "string",
            "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. +optional"
          },
          "readOnly": {
            "type": "boolean",
            "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. +optional"
          },
          "kind": {
            "type": "string",
            "description": "Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared"
          }
        },
        "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod."
      },
      "AzureFileVolumeSource": {
        "type": "object",
        "properties": {
          "secretName": {
            "type": "string",
            "description": "the name of secret that contains Azure Storage Account Name and Key"
          },
          "shareName": {
            "type": "string",
            "description": "Share Name"
          },
          "readOnly": {
            "type": "boolean",
            "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. +optional"
          }
        },
        "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod."
      },
      "Backoff": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "string",
            "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. \"2m\", \"1h\")"
          },
          "factor": {
            "$ref": "#/components/schemas/IntOrString"
          },
          "maxDuration": {
            "type": "string",
            "description": "MaxDuration is the maximum amount of time allowed for the backoff strategy"
          }
        },
        "description": "Backoff is a backoff strategy to use within retryStrategy"
      },
      "BasicAuth": {
        "type": "object",
        "properties": {
          "usernameSecret": {
            "$ref": "#/components/schemas/SecretKeySelector"
          },
          "passwordSecret": {
            "$ref": "#/components/schemas/SecretKeySelector"
          }
        },
        "description": "BasicAuth describes the secret selectors required for basic authentication"
      },
      "BatchArchiveRecordsRequest": {
        "required": [
          "names"
        ],
        "type": "object",
        "properties": {
          "parent": {
            "type": "string",
            "description": "The parent resource shared by all records being archived. Format: warehouses/{warehouse}/projects/{project} If this is set, the parent of all of the records specified in `names` must match this field."
          },
          "names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The names of the records to archive. A maximum of 1000 records can be archived in a batch. format: warehouses/{warehouse}/projects/{project}/records/{record}"
          }
        },
        "description": "Request message for BatchArchiveRecords"
      },
      "BatchGenerateUploadUrlsRequest": {
        "required": [
          "parent",
          "requests"
        ],
        "type": "object",
        "properties": {
          "parent": {
            "type": "string",
            "description": "The blob parent, record resource name."
          },
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenerateUploadUrlRequest"
            },
            "description": "The request message specifying the blob's upload url to generate. A maximum of `20` url can be generate in a batch. requests[i].blob must has same parent as the `parent` in BatchGenerateUploadUrlRequest."
          }
        },
        "description": "Request message for BatchGenerateUploadUrl."
      },
      "BatchGenerateUploadUrlsResponse": {
        "type": "object",
        "properties": {
          "preSignedUrls": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "blob resource name to pre-signed URL."
          }
        },
        "description": "Response message for BatchGenerateUploadUrl."
      },
      "BatchGetBlobsResponse": {
        "type": "object",
        "properties": {
          "blobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Blob"
            },
            "description": "The blobs which were retrieved."
          }
        },
        "description": "Response message for `BatchGetBlobs`."
      },
      "BatchUnarchiveRecordsRequest": {
        "required": [
          "names"
        ],
        "type": "object",
        "properties": {
          "parent": {
            "type": "string",
            "description": "The parent resource shared by all records being unarchived. Format: warehouses/{warehouse}/projects/{project} If this is set, the parent of all of the records specified in `names` must match this field."
          },
          "names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The names of the records to unarchive. A maximum of 1000 records can be unarchived in a batch. format: warehouses/{warehouse}/projects/{project}/records/{record}"
          }
        },
        "description": "Request message for BatchUnarchiveRecords."
      },
      "Blob": {
        "required": [
          "sha256",
          "size"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Optional in the request and required in the response"
          },
          "sha256": {
            "type": "string",
            "description": "Digest of the blob, unique. The client needs to calculate the digest of the file before creating the blob."
          },
          "size": {
            "type": "integer",
            "description": "Blob size in bytes. The client needs to calculate the size of the file before creating the blob.",
            "format": "int64"
          },
          "createTime": {
            "readOnly": true,
            "type": "string",
            "description": "Blob creat time.",
            "format": "date-time"
          },
          "updateTime": {
            "readOnly": true,
            "type": "string",
            "description": "Blob update time.",
            "format": "date-time"
          },
          "storageUri": {
            "readOnly": true,
            "type": "string",
            "description": "Blob storage uri, pattern like `storage://{warehouseSlug}/blobs/{sha256}`"
          },
          "state": {
            "$ref": "#/components/schemas/State"
          }
        },
        "description": "Blob describes actual storage of file referenced by files."
      },
      "CSIVolumeSource": {
        "type": "object",
        "properties": {
          "driver": {
            "type": "string",
            "description": "Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster."
          },
          "readOnly": {
            "type": "boolean",
            "description": "Specifies a read-only configuration for the volume. Defaults to false (read/write). +optional"
          },
          "fsType": {
            "type": "string",
            "description": "Filesystem type to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply. +optional"
          },
          "volumeAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values. +optional"
          },
          "nodePublishSecretRef": {
            "$ref": "#/components/schemas/LocalObjectReference"
          }
        },
        "description": "Represents a source location of a volume to mount, managed by an external CSI driver"
      },
      "Cache": {
        "type": "object",
        "properties": {
          "configMap": {
            "$ref": "#/components/schemas/ConfigMapKeySelector"
          }
        },
        "description": "Cache is the configuration for the type of cache to be used"
      },
      "Capabilities": {
        "type": "object",
        "properties": {
          "add": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Added capabilities +optional"
          },
          "drop": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Removed capabilities +optional"
          }
        },
        "description": "Adds and removes POSIX capabilities from running containers."
      },
      "CephFSVolumeSource": {
        "type": "object",
        "properties": {
          "monitors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
          },
          "path": {
            "type": "string",
            "description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is / +optional"
          },
          "user": {
            "type": "string",
            "description": "Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it +optional"
          },
          "secretFile": {
            "type": "string",
            "description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it +optional"
          },
          "secretRef": {
            "$ref": "#/components/schemas/LocalObjectReference"
          },
          "readOnly": {
            "type": "boolean",
            "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it +optional"
          }
        },
        "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling."
      },
      "CinderVolumeSource": {
        "type": "object",
        "properties": {
          "volumeID": {
            "type": "string",
            "description": "volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md"
          },
          "fsType": {
            "type": "string",
            "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md +optional"
          },
          "readOnly": {
            "type": "boolean",
            "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md +optional"
          },
          "secretRef": {
            "$ref": "#/components/schemas/LocalObjectReference"
          }
        },
        "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling."
      },
      "ClientCertAuth": {
        "type": "object",
        "properties": {
          "clientCertSecret": {
            "$ref": "#/components/schemas/SecretKeySelector"
          },
          "clientKeySecret": {
            "$ref": "#/components/schemas/SecretKeySelector"
          }
        },
        "description": "ClientCertAuth holds necessary information for client authentication via certificates"
      },
      "Condition": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt) +required +kubebuilder:validation:Required +kubebuilder:validation:Pattern=`^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$` +kubebuilder:validation:MaxLength=316"
          },
          "status": {
            "type": "string",
            "description": "status of the condition, one of True, False, Unknown. +required +kubebuilder:validation:Required +kubebuilder:validation:Enum=True;False;Unknown"
          },
          "observedGeneration": {
            "type": "integer",
            "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance. +optional +kubebuilder:validation:Minimum=0",
            "format": "int64"
          },
          "lastTransitionTime": {
            "$ref": "#/components/schemas/Time"
          },
          "reason": {
            "type": "string",
            "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty. +required +kubebuilder:validation:Required +kubebuilder:validation:MaxLength=1024 +kubebuilder:validation:MinLength=1 +kubebuilder:validation:Pattern=`^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$`"
          },
          "message": {
            "type": "string",
            "description": "message is a human readable message indicating details about the transition. This may be an empty string. +required +kubebuilder:validation:Required +kubebuilder:validation:MaxLength=32768"
          }
        },
        "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`     // other fields }"
      },
      "ConfigMapEnvSource": {
        "type": "object",
        "properties": {
          "localObjectReference": {
            "$ref": "#/components/schemas/LocalObjectReference"
          },
          "optional": {
            "type": "boolean",
            "description": "Specify whether the ConfigMap must be defined +optional"
          }
        },
        "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with. The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables."
      },
      "ConfigMapKeySelector": {
        "type": "object",
        "properties": {
          "localObjectReference": {
            "$ref": "#/components/schemas/LocalObjectReference"
          },
          "key": {
            "type": "string",
            "description": "The key to select."
          },
          "optional": {
            "type": "boolean",
            "description": "Specify whether the ConfigMap or its key must be defined +optional"
          }
        },
        "description": "Selects a key from a ConfigMap. +structType=atomic"
      },
      "ConfigMapNodeConfigSource": {
        "type": "object",
        "properties": {
          "namespace": {
            "type": "string",
            "description": "Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases."
          },
          "name": {
            "type": "string",
            "description": "Name is the metadata.name of the referenced ConfigMap. This field is required in all cases."
          },
          "uid": {
            "type": "string",
            "description": "UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status. +optional"
          },
          "resourceVersion": {
            "type": "string",
            "description": "ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status. +optional"
          },
          "kubeletConfigKey": {
            "type": "string",
            "description": "KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases."
          }
        },
        "description": "ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration"
      },
      "ConfigMapProjection": {
        "type": "object",
        "properties": {
          "localObjectReference": {
            "$ref": "#/components/schemas/LocalObjectReference"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyToPath"
            },
            "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'. +optional"
          },
          "optional": {
            "type": "boolean",
            "description": "Specify whether the ConfigMap or its keys must be defined +optional"
          }
        },
        "description": "Adapts a ConfigMap into a projected volume. The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode."
      },
      "ConfigMapVolumeSource": {
        "type": "object",
        "properties": {
          "localObjectReference": {
            "$ref": "#/components/schemas/LocalObjectReference"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyToPath"
            },
            "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'. +optional"
          },
          "defaultMode": {
            "type": "integer",
            "description": "Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. +optional",
            "format": "int32"
          },
          "optional": {
            "type": "boolean",
            "description": "Specify whether the ConfigMap or its keys must be defined +optional"
          }
        },
        "description": "Adapts a ConfigMap into a volume. The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling."
      },
      "ConfigMedia": {
        "type": "object",
        "properties": {
          "interval": {
            "$ref": "#/components/schemas/Interval"
          },
          "topics": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Record config topics."
          },
          "createTime": {
            "type": "string",
            "description": "Config create time. It's a main method to avoid blob hash collision.",
            "format": "date-time"
          }
        },
        "description": "Record config media, the corresponding MIME is `application/vnd.coscene.record.config.v1alpha1+json`."
      },
      "Container": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated."
          },
          "image": {
            "type": "string",
            "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets. +optional"
          },
          "command": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell +optional"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell +optional"
          },
          "workingDir": {
            "type": "string",
            "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated. +optional"
          },
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerPort"
            },
            "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated. +optional +patchMergeKey=containerPort +patchStrategy=merge +listType=map +listMapKey=containerPort +listMapKey=protocol"
          },
          "envFrom": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvFromSource"
            },
            "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated. +optional"
          },
          "env": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvVar"
            },
            "description": "List of environment variables to set in the container. Cannot be updated. +optional +patchMergeKey=name +patchStrategy=merge"
          },
          "resources": {
            "$ref": "#/components/schemas/ResourceRequirements"
          },
          "volumeMounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VolumeMount"
            },
            "description": "Pod volumes to mount into the container's filesystem. Cannot be updated. +optional +patchMergeKey=mountPath +patchStrategy=merge"
          },
          "volumeDevices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VolumeDevice"
            },
            "description": "volumeDevices is the list of block devices to be used by the container. +patchMergeKey=devicePath +patchStrategy=merge +optional"
          },
          "livenessProbe": {
            "$ref": "#/components/schemas/Probe"
          },
          "readinessProbe": {
            "$ref": "#/components/schemas/Probe"
          },
          "startupProbe": {
            "$ref": "#/components/schemas/Probe"
          },
          "lifecycle": {
            "$ref": "#/components/schemas/Lifecycle"
          },
          "terminationMessagePath": {
            "type": "string",
            "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated. +optional"
          },
          "terminationMessagePolicy": {
            "type": "string",
            "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated. +optional"
          },
          "imagePullPolicy": {
            "type": "string",
            "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images +optional"
          },
          "securityContext": {
            "$ref": "#/components/schemas/SecurityContext"
          },
          "stdin": {
            "type": "boolean",
            "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false. +optional"
          },
          "stdinOnce": {
            "type": "boolean",
            "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false +optional"
          },
          "tty": {
            "type": "boolean",
            "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false. +optional"
          }
        },
        "description": "A single application container that you want to run within a pod."
      },
      "ContainerImage": {
        "type": "object",
        "properties": {
          "names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Names by which this image is known. e.g. [\"k8s.gcr.io/hyperkube:v1.0.7\", \"dockerhub.io/google_containers/hyperkube:v1.0.7\"] +optional"
          },
          "sizeBytes": {
            "type": "integer",
            "description": "The size of the image in bytes. +optional",
            "format": "int64"
          }
        },
        "description": "Describe a container image"
      },
      "ContainerNode": {
        "type": "object",
        "properties": {
          "container": {
            "$ref": "#/components/schemas/Container"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ContainerPort": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services. +optional"
          },
          "hostPort": {
            "type": "integer",
            "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this. +optional",
            "format": "int32"
          },
          "containerPort": {
            "type": "integer",
            "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
            "format": "int32"
          },
          "protocol": {
            "type": "string",
            "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\". +optional +default=\"TCP\""
          },
          "hostIP": {
            "type": "string",
            "description": "What host IP to bind the external port to. +optional"
          }
        },
        "description": "ContainerPort represents a network port in a single container."
      },
      "ContainerSetRetryStrategy": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "string",
            "description": "Duration is the time between each retry, examples values are \"300ms\", \"1s\" or \"5m\". Valid time units are \"ns\", \"us\" (or \"Âµs\"), \"ms\", \"s\", \"m\", \"h\"."
          },
          "retries": {
            "$ref": "#/components/schemas/IntOrString"
          }
        }
      },
      "ContainerSetTemplate": {
        "type": "object",
        "properties": {
          "containers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerNode"
            }
          },
          "volumeMounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VolumeMount"
            }
          },
          "retryStrategy": {
            "$ref": "#/components/schemas/ContainerSetRetryStrategy"
          }
        }
      },
      "ContinueOn": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "description": "+optional"
          },
          "failed": {
            "type": "boolean",
            "description": "+optional"
          }
        },
        "description": "ContinueOn defines if a workflow should continue even if a task or step fails/errors. It can be specified if the workflow should continue when the pod errors, fails or both."
      },
      "CopyRecordsRequest": {
        "required": [
          "parent",
          "destination",
          "records"
        ],
        "type": "object",
        "properties": {
          "parent": {
            "type": "string",
            "description": "The source records' project to copy from"
          },
          "destination": {
            "type": "string",
            "description": "The target project to copy to"
          },
          "records": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The source records to copy. It's resource name string."
          }
        },
        "description": "Request message for CopyRecord."
      },
      "CopyRecordsResponse": {
        "required": [
          "records",
          "srcDstMapping"
        ],
        "type": "object",
        "properties": {
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Record"
            },
            "description": "The copied records in the new project"
          },
          "srcDstMapping": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Mapping between copied source record and target record. Entry pattern: \"warehouse/{warehouse}/projects/{srcProject}/records/{srcRecord}\" -> \"warehouse/{warehouse}/projects/{destination}/records/{dstRecord}\""
          }
        },
        "description": "Response message for CopyRecord."
      },
      "Counter": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value is the value of the metric"
          }
        },
        "description": "Counter is a Counter prometheus metric"
      },
      "CreateS3BucketOptions": {
        "type": "object",
        "properties": {
          "objectLocking": {
            "type": "boolean",
            "description": "ObjectLocking Enable object locking"
          }
        },
        "description": "CreateS3BucketOptions options used to determine automatic automatic bucket-creation process"
      },
      "DAGTask": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name is the name of the target"
          },
          "template": {
            "type": "string",
            "description": "Name of template to execute"
          },
          "inline": {
            "$ref": "#/components/schemas/Template"
          },
          "arguments": {
            "$ref": "#/components/schemas/Arguments"
          },
          "templateRef": {
            "$ref": "#/components/schemas/TemplateRef"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Dependencies are name of other targets which this depends on"
          },
          "withItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "description": "WithItems expands a task into multiple parallel tasks from the items in the list"
          },
          "withParam": {
            "type": "string",
            "description": "WithParam expands a task into multiple parallel tasks from the value in the parameter, which is expected to be a JSON list."
          },
          "withSequence": {
            "$ref": "#/components/schemas/Sequence"
          },
          "when": {
            "type": "string",
            "description": "When is an expression in which the task should conditionally execute"
          },
          "continueOn": {
            "$ref": "#/components/schemas/ContinueOn"
          },
          "onExit": {
            "type": "string",
            "description": "OnExit is a template reference which is invoked at the end of the template, irrespective of the success, failure, or error of the primary template. DEPRECATED: Use Hooks[exit].Template instead."
          },
          "depends": {
            "type": "string",
            "description": "Depends are name of other targets which this depends on"
          },
          "hooks": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/LifecycleHook"
            },
            "description": "Hooks hold the lifecycle hook which is invoked at lifecycle of task, irrespective of the success, failure, or error status of the primary task"
          }
        },
        "description": "DAGTask represents a node in the graph during DAG execution"
      },
      "DAGTemplate": {
        "type": "object",
        "properties": {
          "target": {
            "type": "string",
            "description": "Target are one or more names of targets to execute in a DAG"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DAGTask"
            },
            "description": "Tasks are a list of DAG tasks +patchStrategy=merge +patchMergeKey=name"
          },
          "failFast": {
            "type": "boolean",
            "description": "This flag is for DAG logic. The DAG logic has a built-in \"fail fast\" feature to stop scheduling new steps, as soon as it detects that one of the DAG nodes is failed. Then it waits until all DAG nodes are completed before failing the DAG itself. The FailFast flag default is true,  if set to false, it will allow a DAG to run all branches of the DAG to completion (either success or failure), regardless of the failed outcomes of branches in the DAG. More info and example about this feature at https://github.com/argoproj/argo-workflows/issues/1442"
          }
        },
        "description": "DAGTemplate is a template subtype for directed acyclic graph templates"
      },
      "DaemonEndpoint": {
        "type": "object",
        "properties": {
          "Port": {
            "type": "integer",
            "description": "Port number of the given endpoint.",
            "format": "int32"
          }
        },
        "description": "DaemonEndpoint contains information about a single Daemon endpoint."
      },
      "Data": {
        "type": "object",
        "properties": {
          "source": {
            "$ref": "#/components/schemas/DataSource"
          },
          "transformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransformationStep"
            },
            "description": "Transformation applies a set of transformations"
          }
        },
        "description": "Data is a data template"
      },
      "DataSource": {
        "type": "object",
        "properties": {
          "artifactPaths": {
            "$ref": "#/components/schemas/ArtifactPaths"
          }
        },
        "description": "DataSource sources external data into a data template"
      },
      "Device": {
        "required": [
          "serialNumber"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name of the device. Maybe empty in some requests."
          },
          "displayName": {
            "type": "string",
            "description": "Human readable device name."
          },
          "serialNumber": {
            "type": "string",
            "description": "SN given from customers, MUST be unique in an organization."
          },
          "description": {
            "type": "string",
            "description": "Description of the device."
          },
          "createTime": {
            "readOnly": true,
            "type": "string",
            "description": "Timestamp when the device created.",
            "format": "date-time"
          },
          "updateTime": {
            "readOnly": true,
            "type": "string",
            "description": "Timestamp when the device last updated.",
            "format": "date-time"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "description": "The labels for record. The labels contains device model and store, etc. Example: device model: label.display_name=deviceModel::K50         k: deviceModel, v: K50        store: label.display_name=store::nanjing         k: store, v: nanjing learn more go to link: https://docs.gitlab.com/ee/user/project/labels.html#scoped-labels or go to coscene.dataplatform.v1alpha1.resources.Label NOTICE: the key of label.display_name is unique in labels."
          }
        },
        "description": "Device is used to collect records. Device is a organization-level resource."
      },
      "DownwardAPIProjection": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DownwardAPIVolumeFile"
            },
            "description": "Items is a list of DownwardAPIVolume file +optional"
          }
        },
        "description": "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode."
      },
      "DownwardAPIVolumeFile": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
          },
          "fieldRef": {
            "$ref": "#/components/schemas/ObjectFieldSelector"
          },
          "resourceFieldRef": {
            "$ref": "#/components/schemas/ResourceFieldSelector"
          },
          "mode": {
            "type": "integer",
            "description": "Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. +optional",
            "format": "int32"
          }
        },
        "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field"
      },
      "DownwardAPIVolumeSource": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DownwardAPIVolumeFile"
            },
            "description": "Items is a list of downward API volume file +optional"
          },
          "defaultMode": {
            "type": "integer",
            "description": "Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. +optional",
            "format": "int32"
          }
        },
        "description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling."
      },
      "Duration": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Duration is a wrapper around time.Duration which supports correct marshaling to YAML and JSON. In particular, it marshals into strings, which can be used as map keys in json."
      },
      "EmptyDirVolumeSource": {
        "type": "object",
        "properties": {
          "medium": {
            "type": "string",
            "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir +optional"
          },
          "sizeLimit": {
            "$ref": "#/components/schemas/Quantity"
          }
        },
        "description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling."
      },
      "EnvFromSource": {
        "type": "object",
        "properties": {
          "prefix": {
            "type": "string",
            "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER. +optional"
          },
          "configMapRef": {
            "$ref": "#/components/schemas/ConfigMapEnvSource"
          },
          "secretRef": {
            "$ref": "#/components/schemas/SecretEnvSource"
          }
        },
        "description": "EnvFromSource represents the source of a set of ConfigMaps"
      },
      "EnvVar": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the environment variable. Must be a C_IDENTIFIER."
          },
          "value": {
            "type": "string",
            "description": "Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\". +optional"
          },
          "valueFrom": {
            "$ref": "#/components/schemas/EnvVarSource"
          }
        },
        "description": "EnvVar represents an environment variable present in a Container."
      },
      "EnvVarSource": {
        "type": "object",
        "properties": {
          "fieldRef": {
            "$ref": "#/components/schemas/ObjectFieldSelector"
          },
          "resourceFieldRef": {
            "$ref": "#/components/schemas/ResourceFieldSelector"
          },
          "configMapKeyRef": {
            "$ref": "#/components/schemas/ConfigMapKeySelector"
          },
          "secretKeyRef": {
            "$ref": "#/components/schemas/SecretKeySelector"
          }
        },
        "description": "EnvVarSource represents a source for the value of an EnvVar."
      },
      "EphemeralVolumeSource": {
        "type": "object",
        "properties": {
          "volumeClaimTemplate": {
            "$ref": "#/components/schemas/PersistentVolumeClaimTemplate"
          }
        },
        "description": "Represents an ephemeral volume that is handled by a normal storage driver."
      },
      "Event": {
        "required": [
          "displayName",
          "triggerTime"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name of the event. An event belongs to one project. Format:    `warehouses/{warehouse_id}/projects/{project_id}/events/{event_id}`"
          },
          "displayName": {
            "type": "string",
            "description": "the event display name."
          },
          "triggerTime": {
            "type": "string",
            "description": "the event triggered time.",
            "format": "date-time"
          },
          "createTime": {
            "readOnly": true,
            "type": "string",
            "description": "the event created time.",
            "format": "date-time"
          },
          "updateTime": {
            "readOnly": true,
            "type": "string",
            "description": "the event latest modified time.",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "description": "the duration who user input for event in second(s).",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "description": "the description for event."
          },
          "customizedFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "the customized fields for event, only support data type: map<string, string>."
          },
          "device": {
            "$ref": "#/components/schemas/Device"
          },
          "task": {
            "$ref": "#/components/schemas/Task"
          }
        },
        "description": "Events triggered from the source, including notifications, actions, failures, users, etc."
      },
      "ExecAction": {
        "type": "object",
        "properties": {
          "command": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy. +optional"
          }
        },
        "description": "ExecAction describes a \"run in container\" action."
      },
      "ExecutorConfig": {
        "type": "object",
        "properties": {
          "serviceAccountName": {
            "type": "string",
            "description": "ServiceAccountName specifies the service account name of the executor container."
          }
        },
        "description": "ExecutorConfig holds configurations of an executor container."
      },
      "FCVolumeSource": {
        "type": "object",
        "properties": {
          "targetWWNs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Optional: FC target worldwide names (WWNs) +optional"
          },
          "lun": {
            "type": "integer",
            "description": "Optional: FC target lun number +optional",
            "format": "int32"
          },
          "fsType": {
            "type": "string",
            "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine +optional"
          },
          "readOnly": {
            "type": "boolean",
            "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. +optional"
          },
          "wwids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously. +optional"
          }
        },
        "description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling."
      },
      "FieldsV1": {
        "type": "object",
        "properties": {
          "Raw": {
            "type": "string",
            "description": "Raw is the underlying serialization of this object.",
            "format": "bytes"
          }
        },
        "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format. Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set. The exact format is defined in sigs.k8s.io/structured-merge-diff +protobuf.options.(gogoproto.goproto_stringer)=false"
      },
      "File": {
        "required": [
          "filename",
          "sha256",
          "size"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Optional in the request and required in the response."
          },
          "filename": {
            "type": "string",
            "description": "Actual filename with extension like object key in S3 given by clients. Please fill it in all cases."
          },
          "sha256": {
            "type": "string",
            "description": "Digest of the actual file. Calculated by clients. Please fill it in all cases."
          },
          "size": {
            "type": "integer",
            "description": "File size calculated by clients. Please fill it in all cases.",
            "format": "int64"
          },
          "mediaType": {
            "type": "string",
            "description": "See https://en.wikipedia.org/wiki/Media_type. For example, we use `application/vnd.ros1.bag` for ros1 bag. May be empty and calculated at the server-side when the file is uploaded."
          },
          "media": {
            "$ref": "#/components/schemas/GoogleProtobufAny"
          },
          "transformation": {
            "$ref": "#/components/schemas/File_Transformation"
          },
          "createTime": {
            "readOnly": true,
            "type": "string",
            "description": "File create time.",
            "format": "date-time"
          },
          "updateTime": {
            "readOnly": true,
            "type": "string",
            "description": "File update time.",
            "format": "date-time"
          }
        },
        "description": "File describes a file referenced by a revision. It's a reference to actual storage: blobs.    +------------+ +------------+ +------------+    |   File 1   | |   File 2   | |   File 3   |    |            | |            | |            |    +------\\-----+ +------------+ +------------+     -\\               /-                |      -\\            /-                  |       -\\         /-                    |      +------------+             +------|-----+      |  Blob 1    |             |  Blob 2    |      |  6b86b27   |             |  d4735e3   |      +------------+             +------------+"
      },
      "File_Transformation": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "createTime": {
            "readOnly": true,
            "type": "string",
            "description": "Creation timestamp.",
            "format": "date-time"
          },
          "revisionSha256": {
            "readOnly": true,
            "type": "string",
            "description": "associated revision. It should be ALWAYS the revision before the current revision client to create given by server."
          },
          "type": {
            "type": "integer",
            "description": "The transform type.",
            "format": "enum"
          },
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            },
            "description": "The inputs of the transformation. FIXME: Its size should be 1 now because the limitation of implementation."
          },
          "outputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            },
            "description": "The outputs of the transformation. Its size should be always 1."
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "workflow": {
            "$ref": "#/components/schemas/Workflow"
          },
          "device": {
            "$ref": "#/components/schemas/Device"
          }
        },
        "description": "Relationships between files  Revision A                                            Revision B  +------------------------+                            +------------------------+  |                        |                            |                        |  | +--------------------+ |                            | +--------------------+ |  | |      File 1        | |                            | |     New File 1     | |  | |      c147efc       | |                            | |       c817c3f      | |  | |                    | |                            | |                    | |  | +--------------------+ |                            | +--------------------+ |  |                        |  Any operations including  |                        |  | +--------------------+ |  but not limited to        | +--------------------+ |  | |      File 2        | |  1. Create files           | |      File 5        | |  | |      a87974a       | |  2. Delete files           | |      71d6816       | |  | |                    | |  3. Rename files           | |                    | |  | +--------------------+ |  4. Copy records           | +--------------------+ |  |                        |  5. Move records           |                        |  | +--------------------+ |  6. Merge records          | +--------------------+ |  | |      File 3        | |  7. Workflows process      | |      File 3        | |  | |      d9c9240       | |--------------------------->| |      d9c9240       | |  | |                    | |                            | |                    | |  | +--------------------+ |                            | +--------------------+ |  |                        |                            |                        |  | +--------------------+ |                            | +--------------------+ |  | |      File 4        | |                            | |      File 6        | |  | |      f1bb117       | |                            | |      f1bb117       | |  | |                    | |                            | |                    | |  | +--------------------+ |                            | +--------------------+ |  +------------------------+                            +------------------------+  Transformation for New File 1  +------------------------+                      +------------------------+  |         Inputs         |                      |         Outputs        |  | +--------------------+ | TransformationType:  | +--------------------+ |  | |      File 1        | | DERIVED(updated by   | |     New File 1     | |  | |      c147efc       | | workflows)           | |       c817c3f      | |  | |                    | |                      | |                    | |  | +--------------------+ |                      | +--------------------+ |  +------------------------+--------------------->+------------------------+  Transformation for File 5  +------------------------+                      +------------------------+  |         Inputs         |                      |         Outputs        |  | +--------------------+ | TransformationType:  | +--------------------+ |  | |                    | | CREATE(upload by     | |      File 5        | |  | |                    | | user manually or     | |      71d6816       | |  | |                    | | workflow)            | |                    | |  | +--------------------+ |                      | +--------------------+ |  +------------------------+--------------------->+------------------------+  Transformation for File 2  +------------------------+                      +------------------------+  |         Inputs         |                      |         Outputs        |  | +--------------------+ | TransformationType:  | +--------------------+ |  | |      File 2        | | DELETE               | |                    | |  | |      a87974a       | |                      | |                    | |  | |                    | |                      | |                    | |  | +--------------------+ |                      | +--------------------+ |  +------------------------+--------------------->+------------------------+  Transformation for File 6  +------------------------+                      +------------------------+  |         Inputs         |                      |         Outputs        |  | +--------------------+ | TransformationType:  | +--------------------+ |  | |      File 4        | | RENAME               | |      File 6        | |  | |      f1bb117       | |--------------------->| |      f1bb117       | |  | |                    | |                      | |                    | |  | +--------------------+ |                      | +--------------------+ |  +------------------------+                      +------------------------+  Transformation for File 3  +------------------------+                      +------------------------+  |         Inputs         |                      |         Outputs        |  | +--------------------+ | TransformationType:  | +--------------------+ |  | |      File 3        | | NO_CHANGE            | |      File 3        | |  | |      d9c9240       | |--------------------->| |      d9c9240       | |  | |                    | |                      | |                    | |  | +--------------------+ |                      | +--------------------+ |  +------------------------+                      +------------------------+"
      },
      "FlexVolumeSource": {
        "type": "object",
        "properties": {
          "driver": {
            "type": "string",
            "description": "Driver is the name of the driver to use for this volume."
          },
          "fsType": {
            "type": "string",
            "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script. +optional"
          },
          "secretRef": {
            "$ref": "#/components/schemas/LocalObjectReference"
          },
          "readOnly": {
            "type": "boolean",
            "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. +optional"
          },
          "options": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional: Extra command options if any. +optional"
          }
        },
        "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin."
      },
      "FlockerVolumeSource": {
        "type": "object",
        "properties": {
          "datasetName": {
            "type": "string",
            "description": "Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated +optional"
          },
          "datasetUUID": {
            "type": "string",
            "description": "UUID of the dataset. This is unique identifier of a Flocker dataset +optional"
          }
        },
        "description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling."
      },
      "GCEPersistentDiskVolumeSource": {
        "type": "object",
        "properties": {
          "pdName": {
            "type": "string",
            "description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
          },
          "fsType": {
            "type": "string",
            "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine +optional"
          },
          "partition": {
            "type": "integer",
            "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk +optional",
            "format": "int32"
          },
          "readOnly": {
            "type": "boolean",
            "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk +optional"
          }
        },
        "description": "Represents a Persistent Disk resource in Google Compute Engine. A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling."
      },
      "GCSArtifact": {
        "type": "object",
        "properties": {
          "gCSBucket": {
            "$ref": "#/components/schemas/GCSBucket"
          },
          "key": {
            "type": "string",
            "description": "Key is the path in the bucket where the artifact resides"
          }
        },
        "description": "GCSArtifact is the location of a GCS artifact"
      },
      "GCSArtifactRepository": {
        "type": "object",
        "properties": {
          "gCSBucket": {
            "$ref": "#/components/schemas/GCSBucket"
          },
          "keyFormat": {
            "type": "string",
            "description": "KeyFormat is defines the format of how to store keys. Can reference workflow variables"
          }
        },
        "description": "GCSArtifactRepository defines the controller configuration for a GCS artifact repository"
      },
      "GCSBucket": {
        "type": "object",
        "properties": {
          "bucket": {
            "type": "string",
            "description": "Bucket is the name of the bucket"
          },
          "serviceAccountKeySecret": {
            "$ref": "#/components/schemas/SecretKeySelector"
          }
        },
        "description": "GCSBucket contains the access information for interfacring with a GCS bucket"
      },
      "GRPCAction": {
        "type": "object",
        "properties": {
          "port": {
            "type": "integer",
            "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
            "format": "int32"
          },
          "service": {
            "type": "string",
            "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC. +optional +default=\"\""
          }
        }
      },
      "Gauge": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value is the value of the metric"
          },
          "realtime": {
            "type": "boolean",
            "description": "Realtime emits this metric in real time if applicable"
          }
        },
        "description": "Gauge is a Gauge prometheus metric"
      },
      "GenerateDownloadUrlRequest": {
        "required": [
          "blob"
        ],
        "type": "object",
        "properties": {
          "blob": {
            "type": "string",
            "description": "The blob resource name. Only support warehouse id instead of slug."
          },
          "expireDuration": {
            "$ref": "#/components/schemas/Duration"
          },
          "topics": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Which topics to be get/put. Empty means all topics will be used."
          },
          "startTime": {
            "type": "string",
            "description": "Timestamp the datum start used. empty means start from the beginning.",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "Timestamp the datum end used. empty means last to the end.",
            "format": "date-time"
          }
        },
        "description": "Request message for GenerateUploadUrl"
      },
      "GenerateDownloadUrlResponse": {
        "type": "object",
        "properties": {
          "preSignedUrl": {
            "type": "string",
            "description": "The blob pre-signed URL."
          }
        },
        "description": "Response message for `GenerateUploadUrl`."
      },
      "GenerateRecordThumbnailUploadUrlRequest": {
        "required": [
          "record"
        ],
        "type": "object",
        "properties": {
          "record": {
            "type": "string",
            "description": "The record resource name."
          },
          "expireDuration": {
            "$ref": "#/components/schemas/Duration"
          }
        },
        "description": "Request for GenerateRecordThumbnailUploadUrl"
      },
      "GenerateRecordThumbnailUploadUrlResponse": {
        "type": "object",
        "properties": {
          "preSignedUri": {
            "type": "string",
            "description": "The record pre-signed URL."
          }
        },
        "description": "Response for GenerateRecordThumbnailUploadUrl"
      },
      "GenerateRevisionRequest": {
        "required": [
          "parent",
          "revision"
        ],
        "type": "object",
        "properties": {
          "parent": {
            "type": "string",
            "description": "The parent to create the revision under."
          },
          "revision": {
            "$ref": "#/components/schemas/Revision"
          },
          "method": {
            "type": "integer",
            "description": "The method to create the revision. Default method is PUT.",
            "format": "enum"
          }
        },
        "description": "Request message for CreateRevision."
      },
      "GenerateUploadUrlRequest": {
        "required": [
          "blob"
        ],
        "type": "object",
        "properties": {
          "blob": {
            "type": "string",
            "description": "The blob resource name. Only support warehouse id instead of slug."
          },
          "expireDuration": {
            "$ref": "#/components/schemas/Duration"
          }
        },
        "description": "Request message for GenerateUploadUrl"
      },
      "GenerateUploadUrlResponse": {
        "type": "object",
        "properties": {
          "preSignedUrl": {
            "type": "string",
            "description": "The blob pre-signed URL."
          }
        },
        "description": "Response message for GenerateUploadUrl"
      },
      "GitArtifact": {
        "type": "object",
        "properties": {
          "repo": {
            "type": "string",
            "description": "Repo is the git repository"
          },
          "revision": {
            "type": "string",
            "description": "Revision is the git commit, tag, branch to checkout"
          },
          "depth": {
            "type": "integer",
            "description": "Depth specifies clones/fetches should be shallow and include the given number of commits from the branch tip",
            "format": "uint64"
          },
          "fetch": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fetch specifies a number of refs that should be fetched before checkout"
          },
          "usernameSecret": {
            "$ref": "#/components/schemas/SecretKeySelector"
          },
          "passwordSecret": {
            "$ref": "#/components/schemas/SecretKeySelector"
          },
          "sshPrivateKeySecret": {
            "$ref": "#/components/schemas/SecretKeySelector"
          },
          "insecureIgnoreHostKey": {
            "type": "boolean",
            "description": "InsecureIgnoreHostKey disables SSH strict host key checking during git clone"
          },
          "disableSubmodules": {
            "type": "boolean",
            "description": "DisableSubmodules disables submodules during git clone"
          },
          "singleBranch": {
            "type": "boolean",
            "description": "SingleBranch enables single branch clone, using the `branch` parameter"
          },
          "branch": {
            "type": "string",
            "description": "Branch is the branch to fetch when `SingleBranch` is enabled"
          }
        },
        "description": "GitArtifact is the location of an git artifact"
      },
      "GitRepoVolumeSource": {
        "type": "object",
        "properties": {
          "repository": {
            "type": "string",
            "description": "Repository URL"
          },
          "revision": {
            "type": "string",
            "description": "Commit hash for the specified revision. +optional"
          },
          "directory": {
            "type": "string",
            "description": "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name. +optional"
          }
        },
        "description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container."
      },
      "GlusterfsVolumeSource": {
        "type": "object",
        "properties": {
          "endpoints": {
            "type": "string",
            "description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod"
          },
          "path": {
            "type": "string",
            "description": "Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod"
          },
          "readOnly": {
            "type": "boolean",
            "description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod +optional"
          }
        },
        "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling."
      },
      "GoogleProtobufAny": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "description": "The type of the serialized message."
          }
        },
        "additionalProperties": true,
        "description": "Contains an arbitrary serialized message along with a @type that describes the type of the serialized message."
      },
      "HDFSArtifact": {
        "type": "object",
        "properties": {
          "hDFSConfig": {
            "$ref": "#/components/schemas/HDFSConfig"
          },
          "path": {
            "type": "string",
            "description": "Path is a file path in HDFS"
          },
          "force": {
            "type": "boolean",
            "description": "Force copies a file forcibly even if it exists"
          }
        },
        "description": "HDFSArtifact is the location of an HDFS artifact"
      },
      "HDFSArtifactRepository": {
        "type": "object",
        "properties": {
          "hDFSConfig": {
            "$ref": "#/components/schemas/HDFSConfig"
          },
          "pathFormat": {
            "type": "string",
            "description": "PathFormat is defines the format of path to store a file. Can reference workflow variables"
          },
          "force": {
            "type": "boolean",
            "description": "Force copies a file forcibly even if it exists"
          }
        },
        "description": "HDFSArtifactRepository defines the controller configuration for an HDFS artifact repository"
      },
      "HDFSConfig": {
        "type": "object",
        "properties": {
          "hDFSKrbConfig": {
            "$ref": "#/components/schemas/HDFSKrbConfig"
          },
          "addresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Addresses is accessible addresses of HDFS name nodes"
          },
          "hdfsUser": {
            "type": "string",
            "description": "HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used."
          }
        },
        "description": "HDFSConfig is configurations for HDFS"
      },
      "HDFSKrbConfig": {
        "type": "object",
        "properties": {
          "krbCCacheSecret": {
            "$ref": "#/components/schemas/SecretKeySelector"
          },
          "krbKeytabSecret": {
            "$ref": "#/components/schemas/SecretKeySelector"
          },
          "krbUsername": {
            "type": "string",
            "description": "KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used."
          },
          "krbRealm": {
            "type": "string",
            "description": "KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used."
          },
          "krbConfigConfigMap": {
            "$ref": "#/components/schemas/ConfigMapKeySelector"
          },
          "krbServicePrincipalName": {
            "type": "string",
            "description": "KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used."
          }
        },
        "description": "HDFSKrbConfig is auth configurations for Kerberos"
      },
      "HTTP": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "description": "Method is HTTP methods for HTTP Request"
          },
          "url": {
            "type": "string",
            "description": "URL of the HTTP Request"
          },
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HTTPHeader"
            },
            "description": "Headers are an optional list of headers to send with HTTP requests"
          },
          "timeoutSeconds": {
            "type": "integer",
            "description": "TimeoutSeconds is request timeout for HTTP Request. Default is 30 seconds",
            "format": "int64"
          },
          "successCondition": {
            "type": "string",
            "description": "SuccessCondition is an expression if evaluated to true is considered successful"
          },
          "body": {
            "type": "string",
            "description": "Body is content of the HTTP Request"
          },
          "bodyFrom": {
            "$ref": "#/components/schemas/HTTPBodySource"
          },
          "insecureSkipVerify": {
            "type": "boolean",
            "description": "InsecureSkipVerify is a bool when if set to true will skip TLS verification for the HTTP client"
          }
        }
      },
      "HTTPArtifact": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of the artifact"
          },
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Header"
            },
            "description": "Headers are an optional list of headers to send with HTTP requests for artifacts"
          },
          "auth": {
            "$ref": "#/components/schemas/HTTPAuth"
          }
        },
        "description": "HTTPArtifact allows a file served on HTTP to be placed as an input artifact in a container"
      },
      "HTTPAuth": {
        "type": "object",
        "properties": {
          "clientCert": {
            "$ref": "#/components/schemas/ClientCertAuth"
          },
          "oauth2": {
            "$ref": "#/components/schemas/OAuth2Auth"
          },
          "basicAuth": {
            "$ref": "#/components/schemas/BasicAuth"
          }
        }
      },
      "HTTPBodySource": {
        "type": "object",
        "properties": {
          "bytes": {
            "type": "string",
            "format": "bytes"
          }
        },
        "description": "HTTPBodySource contains the source of the HTTP body."
      },
      "HTTPGetAction": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to access on the HTTP server. +optional"
          },
          "port": {
            "$ref": "#/components/schemas/IntOrString"
          },
          "host": {
            "type": "string",
            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead. +optional"
          },
          "scheme": {
            "type": "string",
            "description": "Scheme to use for connecting to the host. Defaults to HTTP. +optional"
          },
          "httpHeaders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HTTPHeader"
            },
            "description": "Custom headers to set in the request. HTTP allows repeated headers. +optional"
          }
        },
        "description": "HTTPGetAction describes an action based on HTTP Get requests."
      },
      "HTTPHeader": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "valueFrom": {
            "$ref": "#/components/schemas/HTTPHeaderSource"
          }
        }
      },
      "HTTPHeaderSource": {
        "type": "object",
        "properties": {
          "secretKeyRef": {
            "$ref": "#/components/schemas/SecretKeySelector"
          }
        }
      },
      "Header": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name is the header name"
          },
          "value": {
            "type": "string",
            "description": "Value is the literal value to use for the header"
          }
        },
        "description": "Header indicate a key-value request header to be used when fetching artifacts over HTTP"
      },
      "Histogram": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value is the value of the metric"
          },
          "buckets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Amount"
            },
            "description": "Buckets is a list of bucket divisors for the histogram"
          }
        },
        "description": "Histogram is a Histogram prometheus metric"
      },
      "HostAlias": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "description": "IP address of the host file entry."
          },
          "hostnames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Hostnames for the above IP address."
          }
        },
        "description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file."
      },
      "HostPathVolumeSource": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
          },
          "type": {
            "type": "string",
            "description": "Type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath +optional"
          }
        },
        "description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling."
      },
      "ISCSIVolumeSource": {
        "type": "object",
        "properties": {
          "targetPortal": {
            "type": "string",
            "description": "iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
          },
          "iqn": {
            "type": "string",
            "description": "Target iSCSI Qualified Name."
          },
          "lun": {
            "type": "integer",
            "description": "iSCSI Target Lun number.",
            "format": "int32"
          },
          "iscsiInterface": {
            "type": "string",
            "description": "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp). +optional"
          },
          "fsType": {
            "type": "string",
            "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine +optional"
          },
          "readOnly": {
            "type": "boolean",
            "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. +optional"
          },
          "portals": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260). +optional"
          },
          "chapAuthDiscovery": {
            "type": "boolean",
            "description": "whether support iSCSI Discovery CHAP authentication +optional"
          },
          "chapAuthSession": {
            "type": "boolean",
            "description": "whether support iSCSI Session CHAP authentication +optional"
          },
          "secretRef": {
            "$ref": "#/components/schemas/LocalObjectReference"
          },
          "initiatorName": {
            "type": "string",
            "description": "Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection. +optional"
          }
        },
        "description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling."
      },
      "Inputs": {
        "type": "object",
        "properties": {
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Parameter"
            },
            "description": "Parameters are a list of parameters passed as inputs +patchStrategy=merge +patchMergeKey=name"
          },
          "artifacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Artifact"
            },
            "description": "Artifact are a list of artifacts passed as inputs +patchStrategy=merge +patchMergeKey=name"
          }
        },
        "description": "Inputs are the mechanism for passing parameters, artifacts, volumes from one template to another"
      },
      "IntOrString": {
        "type": "object",
        "properties": {
          "type": {
            "type": "integer",
            "format": "int64"
          },
          "intVal": {
            "type": "integer",
            "format": "int32"
          },
          "strVal": {
            "type": "string"
          }
        },
        "description": "IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number. TODO: Rename to Int32OrString +protobuf=true +protobuf.options.(gogoproto.goproto_stringer)=false +k8s:openapi-gen=true"
      },
      "Interval": {
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "description": "Optional. Inclusive start of the interval. If specified, a Timestamp matching this interval will have to be the same or after the start.",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "Optional. Exclusive end of the interval. If specified, a Timestamp matching this interval will have to be before the end.",
            "format": "date-time"
          }
        },
        "description": "Represents a time interval, encoded as a Timestamp start (inclusive) and a Timestamp end (exclusive). The start must be less than or equal to the end. When the start equals the end, the interval is empty (matches no time). When both start and end are unspecified, the interval matches any time."
      },
      "Item": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "format": "bytes"
          }
        },
        "description": "Item expands a single workflow step into multiple parallel steps The value of Item can be a map, string, bool, or number +protobuf.options.(gogoproto.goproto_stringer)=false +kubebuilder:validation:Type=object"
      },
      "KeyToPath": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key to project."
          },
          "path": {
            "type": "string",
            "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
          },
          "mode": {
            "type": "integer",
            "description": "Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. +optional",
            "format": "int32"
          }
        },
        "description": "Maps a string key to a path within a volume."
      },
      "Label": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name of the label. A label belongs to one project or an organization. Format: The project's label    `warehouses/{warehouse_id}/projects/{project_id}/labels/{label_id}` The organization's label    `labels/{label_id}`"
          },
          "displayName": {
            "type": "string",
            "description": "The label display name. Supports: text               Texted labels, like: bug. text::text         Scoped labels, like: priority::high, priority::low, learn more go to link: https://docs.gitlab.com/ee/user/project/labels.html#scoped-labels text::text::text   Nested scopes, like: workflow::backend::review, workflow::backend::development, workflow::frontend::review, learn more go to link: https://docs.gitlab.com/ee/user/project/labels.html#nested-scopes"
          },
          "description": {
            "type": "string",
            "description": "The description for label."
          },
          "color": {
            "type": "string",
            "description": "The color of label to display"
          },
          "createTime": {
            "readOnly": true,
            "type": "string",
            "description": "Timestamp when the label created.",
            "format": "date-time"
          },
          "updateTime": {
            "readOnly": true,
            "type": "string",
            "description": "Timestamp when the label last updated.",
            "format": "date-time"
          }
        },
        "description": "The label message."
      },
      "LabelSelector": {
        "type": "object",
        "properties": {
          "matchLabels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed. +optional"
          },
          "matchExpressions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LabelSelectorRequirement"
            },
            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed. +optional"
          }
        },
        "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects. +structType=atomic"
      },
      "LabelSelectorRequirement": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "key is the label key that the selector applies to. +patchMergeKey=key +patchStrategy=merge"
          },
          "operator": {
            "type": "string",
            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. +optional"
          }
        },
        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
      },
      "LabelValueFrom": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string"
          }
        }
      },
      "Lifecycle": {
        "type": "object",
        "properties": {
          "postStart": {
            "$ref": "#/components/schemas/LifecycleHandler"
          },
          "preStop": {
            "$ref": "#/components/schemas/LifecycleHandler"
          }
        },
        "description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted."
      },
      "LifecycleHandler": {
        "type": "object",
        "properties": {
          "exec": {
            "$ref": "#/components/schemas/ExecAction"
          },
          "httpGet": {
            "$ref": "#/components/schemas/HTTPGetAction"
          },
          "tcpSocket": {
            "$ref": "#/components/schemas/TCPSocketAction"
          }
        },
        "description": "LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified."
      },
      "LifecycleHook": {
        "type": "object",
        "properties": {
          "template": {
            "type": "string",
            "description": "Template is the name of the template to execute by the hook"
          },
          "arguments": {
            "$ref": "#/components/schemas/Arguments"
          },
          "templateRef": {
            "$ref": "#/components/schemas/TemplateRef"
          },
          "expression": {
            "type": "string",
            "description": "Expression is a condition expression for when a node will be retried. If it evaluates to false, the node will not be retried and the retry strategy will be ignored"
          }
        }
      },
      "ListDevicesResponse": {
        "type": "object",
        "properties": {
          "devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Device"
            },
            "description": "List of the devices."
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
          },
          "totalSize": {
            "type": "integer",
            "description": "The total size of the request. The value may be an estimate.",
            "format": "int64"
          }
        },
        "description": "Response message for ListDevices."
      },
      "ListEventsResponse": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            },
            "description": "List of the events."
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
          },
          "totalSize": {
            "type": "integer",
            "description": "The total size of the request. The value may be an estimate.",
            "format": "int64"
          }
        },
        "description": "Response message for ListEvents."
      },
      "ListFilesResponse": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            },
            "description": "List of the files."
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
          },
          "totalSize": {
            "type": "integer",
            "description": "The total size of the request. The value may be an estimate.",
            "format": "int64"
          }
        },
        "description": "Response message for ListFiles."
      },
      "ListRecordsResponse": {
        "type": "object",
        "properties": {
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Record"
            },
            "description": "List of the records."
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
          },
          "totalSize": {
            "type": "integer",
            "description": "The total size of the request. The value may be an estimate.",
            "format": "int64"
          }
        },
        "description": "Response message for ListRecords."
      },
      "ListRevisionsResponse": {
        "type": "object",
        "properties": {
          "revisions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Revision"
            },
            "description": "List of the revisions."
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
          },
          "totalSize": {
            "type": "integer",
            "description": "The total size of the request. The value may be an estimate.",
            "format": "int64"
          }
        },
        "description": "Response message for ListRevisions."
      },
      "ListTagsResponse": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "description": "List of the tags."
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
          },
          "totalSize": {
            "type": "integer",
            "description": "The total size of the request. The value may be an estimate.",
            "format": "int64"
          }
        },
        "description": "Response message for ListTags."
      },
      "ListTasksResponse": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Task"
            },
            "description": "List of the tasks."
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
          },
          "totalSize": {
            "type": "integer",
            "description": "The total size of the request. The value may be an estimate.",
            "format": "int64"
          }
        },
        "description": "Response message for ListTasks."
      },
      "LocalObjectReference": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? +optional"
          }
        },
        "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace. +structType=atomic"
      },
      "ManagedFieldsEntry": {
        "type": "object",
        "properties": {
          "manager": {
            "type": "string",
            "description": "Manager is an identifier of the workflow managing these fields."
          },
          "operation": {
            "type": "string",
            "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'."
          },
          "apiVersion": {
            "type": "string",
            "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted."
          },
          "time": {
            "type": "string",
            "description": "Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply' +optional",
            "format": "date-time"
          },
          "fieldsType": {
            "type": "string",
            "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\""
          },
          "fieldsV1": {
            "$ref": "#/components/schemas/FieldsV1"
          },
          "subresource": {
            "type": "string",
            "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource."
          }
        },
        "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to."
      },
      "ManifestFrom": {
        "type": "object",
        "properties": {
          "artifact": {
            "$ref": "#/components/schemas/Artifact"
          }
        }
      },
      "Memoize": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key is the key to use as the caching key"
          },
          "cache": {
            "$ref": "#/components/schemas/Cache"
          },
          "maxAge": {
            "type": "string",
            "description": "MaxAge is the maximum age (e.g. \"180s\", \"24h\") of an entry that is still considered valid. If an entry is older than the MaxAge, it will be ignored."
          }
        },
        "description": "Memoization enables caching for the Outputs of the template"
      },
      "MergeRecordsRequest": {
        "required": [
          "parent",
          "records"
        ],
        "type": "object",
        "properties": {
          "parent": {
            "type": "string",
            "description": "The parent to merge records from. Format:    warehouses/{warehouse_id}/projects/{project_id}"
          },
          "records": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Targets(resource name) to merge. Their parent needs to be the same as parent."
          },
          "target": {
            "$ref": "#/components/schemas/Record"
          }
        },
        "description": "Request message for MergeRecords."
      },
      "MergeRecordsResponse": {
        "type": "object",
        "properties": {
          "record": {
            "$ref": "#/components/schemas/Record"
          }
        },
        "description": "Response message for MergeRecords."
      },
      "Metadata": {
        "type": "object",
        "properties": {
          "annotations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "description": "Pod metdata"
      },
      "MetricLabel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "description": "MetricLabel is a single label for a prometheus metric"
      },
      "Metrics": {
        "type": "object",
        "properties": {
          "prometheus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Prometheus"
            },
            "description": "Prometheus is a list of prometheus metrics to be emitted"
          }
        },
        "description": "Metrics are a list of metrics emitted from a Workflow/Template"
      },
      "Mutex": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the mutex"
          }
        },
        "description": "Mutex holds Mutex configuration"
      },
      "MutexHolding": {
        "type": "object",
        "properties": {
          "mutex": {
            "type": "string",
            "description": "Reference for the mutex e.g: ${namespace}/mutex/${mutexName}"
          },
          "holder": {
            "type": "string",
            "description": "Holder is a reference to the object which holds the Mutex. Holding Scenario:   1. Current workflow's NodeID which is holding the lock.      e.g: ${NodeID} Waiting Scenario:   1. Current workflow or other workflow NodeID which is holding the lock.      e.g: ${WorkflowName}/${NodeID}"
          }
        },
        "description": "MutexHolding describes the mutex and the object which is holding it."
      },
      "MutexStatus": {
        "type": "object",
        "properties": {
          "holding": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MutexHolding"
            },
            "description": "Holding is a list of mutexes and their respective objects that are held by mutex lock for this workflow. +listType=atomic"
          },
          "waiting": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MutexHolding"
            },
            "description": "Waiting is a list of mutexes and their respective objects this workflow is waiting for. +listType=atomic"
          }
        },
        "description": "MutexStatus contains which objects hold  mutex locks, and which objects this workflow is waiting on to release locks."
      },
      "NFSVolumeSource": {
        "type": "object",
        "properties": {
          "server": {
            "type": "string",
            "description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
          },
          "path": {
            "type": "string",
            "description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
          },
          "readOnly": {
            "type": "boolean",
            "description": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs +optional"
          }
        },
        "description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling."
      },
      "NodeAddress": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Node address type, one of Hostname, ExternalIP or InternalIP."
          },
          "address": {
            "type": "string",
            "description": "The node address."
          }
        },
        "description": "NodeAddress contains information for the node's address."
      },
      "NodeAffinity": {
        "type": "object",
        "properties": {
          "requiredDuringSchedulingIgnoredDuringExecution": {
            "$ref": "#/components/schemas/NodeSelector"
          },
          "preferredDuringSchedulingIgnoredDuringExecution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PreferredSchedulingTerm"
            },
            "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred. +optional"
          }
        },
        "description": "Node affinity is a group of node affinity scheduling rules."
      },
      "NodeCondition": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of node condition."
          },
          "status": {
            "type": "string",
            "description": "Status of the condition, one of True, False, Unknown."
          },
          "lastHeartbeatTime": {
            "$ref": "#/components/schemas/Time"
          },
          "lastTransitionTime": {
            "$ref": "#/components/schemas/Time"
          },
          "reason": {
            "type": "string",
            "description": "(brief) reason for the condition's last transition. +optional"
          },
          "message": {
            "type": "string",
            "description": "Human readable message indicating details about last transition. +optional"
          }
        },
        "description": "NodeCondition contains condition information for a node."
      },
      "NodeConfigSource": {
        "type": "object",
        "properties": {
          "configMap": {
            "$ref": "#/components/schemas/ConfigMapNodeConfigSource"
          }
        },
        "description": "NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22"
      },
      "NodeConfigStatus": {
        "type": "object",
        "properties": {
          "assigned": {
            "$ref": "#/components/schemas/NodeConfigSource"
          },
          "active": {
            "$ref": "#/components/schemas/NodeConfigSource"
          },
          "lastKnownGood": {
            "$ref": "#/components/schemas/NodeConfigSource"
          },
          "error": {
            "type": "string",
            "description": "Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions. +optional"
          }
        },
        "description": "NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource."
      },
      "NodeDaemonEndpoints": {
        "type": "object",
        "properties": {
          "kubeletEndpoint": {
            "$ref": "#/components/schemas/DaemonEndpoint"
          }
        },
        "description": "NodeDaemonEndpoints lists ports opened by daemons running on the Node."
      },
      "NodeSelector": {
        "type": "object",
        "properties": {
          "nodeSelectorTerms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeSelectorTerm"
            },
            "description": "Required. A list of node selector terms. The terms are ORed."
          }
        },
        "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms. +structType=atomic"
      },
      "NodeSelectorRequirement": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The label key that the selector applies to."
          },
          "operator": {
            "type": "string",
            "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch. +optional"
          }
        },
        "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
      },
      "NodeSelectorTerm": {
        "type": "object",
        "properties": {
          "matchExpressions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeSelectorRequirement"
            },
            "description": "A list of node selector requirements by node's labels. +optional"
          },
          "matchFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeSelectorRequirement"
            },
            "description": "A list of node selector requirements by node's fields. +optional"
          }
        },
        "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm. +structType=atomic"
      },
      "NodeStatus": {
        "type": "object",
        "properties": {
          "capacity": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Quantity"
            },
            "description": "Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity +optional"
          },
          "allocatable": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Quantity"
            },
            "description": "Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity. +optional"
          },
          "phase": {
            "type": "string",
            "description": "NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated. +optional"
          },
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeCondition"
            },
            "description": "Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition +optional +patchMergeKey=type +patchStrategy=merge"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeAddress"
            },
            "description": "List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See http://pr.k8s.io/79391 for an example. +optional +patchMergeKey=type +patchStrategy=merge"
          },
          "daemonEndpoints": {
            "$ref": "#/components/schemas/NodeDaemonEndpoints"
          },
          "nodeInfo": {
            "$ref": "#/components/schemas/NodeSystemInfo"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerImage"
            },
            "description": "List of container images on this node +optional"
          },
          "volumesInUse": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of attachable volumes in use (mounted) by the node. +optional"
          },
          "volumesAttached": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachedVolume"
            },
            "description": "List of volumes that are attached to the node. +optional"
          },
          "config": {
            "$ref": "#/components/schemas/NodeConfigStatus"
          }
        },
        "description": "NodeStatus is information about the current status of a node."
      },
      "NodeSystemInfo": {
        "type": "object",
        "properties": {
          "machineID": {
            "type": "string",
            "description": "MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html"
          },
          "systemUUID": {
            "type": "string",
            "description": "SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid"
          },
          "bootID": {
            "type": "string",
            "description": "Boot ID reported by the node."
          },
          "kernelVersion": {
            "type": "string",
            "description": "Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64)."
          },
          "osImage": {
            "type": "string",
            "description": "OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy))."
          },
          "containerRuntimeVersion": {
            "type": "string",
            "description": "ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0)."
          },
          "kubeletVersion": {
            "type": "string",
            "description": "Kubelet Version reported by the node."
          },
          "kubeProxyVersion": {
            "type": "string",
            "description": "KubeProxy Version reported by the node."
          },
          "operatingSystem": {
            "type": "string",
            "description": "The Operating System reported by the node"
          },
          "architecture": {
            "type": "string",
            "description": "The Architecture reported by the node"
          }
        },
        "description": "NodeSystemInfo is a set of ids/uuids to uniquely identify the node."
      },
      "NoneStrategy": {
        "type": "object",
        "properties": {},
        "description": "NoneStrategy indicates to skip tar process and upload the files or directory tree as independent files. Note that if the artifact is a directory, the artifact driver must support the ability to save/load the directory appropriately."
      },
      "OAuth2Auth": {
        "type": "object",
        "properties": {
          "clientIDSecret": {
            "$ref": "#/components/schemas/SecretKeySelector"
          },
          "clientSecretSecret": {
            "$ref": "#/components/schemas/SecretKeySelector"
          },
          "tokenURLSecret": {
            "$ref": "#/components/schemas/SecretKeySelector"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "endpointParams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OAuth2EndpointParam"
            }
          }
        },
        "description": "OAuth2Auth holds all information for client authentication via OAuth2 tokens"
      },
      "OAuth2EndpointParam": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Name is the header name"
          },
          "value": {
            "type": "string",
            "description": "Value is the literal value to use for the header"
          }
        },
        "description": "EndpointParam is for requesting optional fields that should be sent in the oauth request"
      },
      "OSSArtifact": {
        "type": "object",
        "properties": {
          "oSSBucket": {
            "$ref": "#/components/schemas/OSSBucket"
          },
          "key": {
            "type": "string",
            "description": "Key is the path in the bucket where the artifact resides"
          }
        },
        "description": "OSSArtifact is the location of an Alibaba Cloud OSS artifact"
      },
      "OSSArtifactRepository": {
        "type": "object",
        "properties": {
          "oSSBucket": {
            "$ref": "#/components/schemas/OSSBucket"
          },
          "keyFormat": {
            "type": "string",
            "description": "KeyFormat is defines the format of how to store keys. Can reference workflow variables"
          }
        },
        "description": "OSSArtifactRepository defines the controller configuration for an OSS artifact repository"
      },
      "OSSBucket": {
        "type": "object",
        "properties": {
          "endpoint": {
            "type": "string",
            "description": "Endpoint is the hostname of the bucket endpoint"
          },
          "bucket": {
            "type": "string",
            "description": "Bucket is the name of the bucket"
          },
          "accessKeySecret": {
            "$ref": "#/components/schemas/SecretKeySelector"
          },
          "secretKeySecret": {
            "$ref": "#/components/schemas/SecretKeySelector"
          },
          "createBucketIfNotPresent": {
            "type": "boolean",
            "description": "CreateBucketIfNotPresent tells the driver to attempt to create the OSS bucket for output artifacts, if it doesn't exist"
          },
          "securityToken": {
            "type": "string",
            "description": "SecurityToken is the user's temporary security token. For more details, check out: https://www.alibabacloud.com/help/doc-detail/100624.htm"
          },
          "lifecycleRule": {
            "$ref": "#/components/schemas/OSSLifecycleRule"
          }
        },
        "description": "OSSBucket contains the access information required for interfacing with an Alibaba Cloud OSS bucket"
      },
      "OSSLifecycleRule": {
        "type": "object",
        "properties": {
          "markInfrequentAccessAfterDays": {
            "type": "integer",
            "description": "MarkInfrequentAccessAfterDays is the number of days before we convert the objects in the bucket to Infrequent Access (IA) storage type",
            "format": "int32"
          },
          "markDeletionAfterDays": {
            "type": "integer",
            "description": "MarkDeletionAfterDays is the number of days before we delete objects in the bucket",
            "format": "int32"
          }
        },
        "description": "OSSLifecycleRule specifies how to manage bucket's lifecycle"
      },
      "Object": {
        "type": "object",
        "properties": {},
        "description": "+kubebuilder:validation:Type=object"
      },
      "ObjectFieldSelector": {
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string",
            "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\". +optional"
          },
          "fieldPath": {
            "type": "string",
            "description": "Path of the field to select in the specified API version."
          }
        },
        "description": "ObjectFieldSelector selects an APIVersioned field of an object. +structType=atomic"
      },
      "ObjectMeta": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names +optional"
          },
          "generateName": {
            "type": "string",
            "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency +optional"
          },
          "namespace": {
            "type": "string",
            "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces +optional"
          },
          "selfLink": {
            "type": "string",
            "description": "SelfLink is a URL representing this object. Populated by the system. Read-only. DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release. +optional"
          },
          "uid": {
            "type": "string",
            "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids +optional"
          },
          "resourceVersion": {
            "type": "string",
            "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency +optional"
          },
          "generation": {
            "type": "integer",
            "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only. +optional",
            "format": "int64"
          },
          "creationTimestamp": {
            "type": "string",
            "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata +optional",
            "format": "date-time"
          },
          "deletionTimestamp": {
            "$ref": "#/components/schemas/Time"
          },
          "deletionGracePeriodSeconds": {
            "type": "integer",
            "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only. +optional",
            "format": "int64"
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels +optional"
          },
          "annotations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations +optional"
          },
          "ownerReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OwnerReference"
            },
            "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller. +optional +patchMergeKey=uid +patchStrategy=merge"
          },
          "finalizers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list. +optional +patchStrategy=merge"
          },
          "clusterName": {
            "type": "string",
            "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request. +optional"
          },
          "managedFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManagedFieldsEntry"
            },
            "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object. +optional"
          }
        },
        "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."
      },
      "Outputs": {
        "type": "object",
        "properties": {
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Parameter"
            },
            "description": "Parameters holds the list of output parameters produced by a step +patchStrategy=merge +patchMergeKey=name"
          },
          "artifacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Artifact"
            },
            "description": "Artifacts holds the list of output artifacts produced by a step +patchStrategy=merge +patchMergeKey=name"
          },
          "result": {
            "type": "string",
            "description": "Result holds the result (stdout) of a script template"
          },
          "exitCode": {
            "type": "string",
            "description": "ExitCode holds the exit code of a script template"
          }
        },
        "description": "Outputs hold parameters, artifacts, and results from a step"
      },
      "OwnerReference": {
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string",
            "description": "API version of the referent."
          },
          "kind": {
            "type": "string",
            "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
          },
          "name": {
            "type": "string",
            "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
          },
          "uid": {
            "type": "string",
            "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
          },
          "controller": {
            "type": "boolean",
            "description": "If true, this reference points to the managing controller. +optional"
          },
          "blockOwnerDeletion": {
            "type": "boolean",
            "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned. +optional"
          }
        },
        "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field. +structType=atomic"
      },
      "ParallelSteps": {
        "type": "object",
        "properties": {
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowStep"
            }
          }
        },
        "description": "+kubebuilder:validation:Type=array"
      },
      "Parameter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name is the parameter name"
          },
          "default": {
            "type": "string",
            "description": "Default is the default value to use for an input parameter if a value was not supplied"
          },
          "value": {
            "type": "string",
            "description": "Value is the literal value to use for the parameter. If specified in the context of an input parameter, the value takes precedence over any passed values"
          },
          "valueFrom": {
            "$ref": "#/components/schemas/ValueFrom"
          },
          "globalName": {
            "type": "string",
            "description": "GlobalName exports an output parameter to the global scope, making it available as '{{workflow.outputs.parameters.XXXX}} and in workflow.status.outputs.parameters"
          },
          "enum": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Enum holds a list of string values to choose from, for the actual value of the parameter"
          },
          "description": {
            "type": "string",
            "description": "Description is the parameter description"
          }
        },
        "description": "Parameter indicate a passed string parameter to a service template with an optional default value"
      },
      "PersistentVolumeClaim": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/ObjectMeta"
          },
          "spec": {
            "$ref": "#/components/schemas/PersistentVolumeClaimSpec"
          },
          "status": {
            "$ref": "#/components/schemas/PersistentVolumeClaimStatus"
          }
        },
        "description": "PersistentVolumeClaim is a user's request for and claim to a persistent volume"
      },
      "PersistentVolumeClaimCondition": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "lastProbeTime": {
            "$ref": "#/components/schemas/Time"
          },
          "lastTransitionTime": {
            "$ref": "#/components/schemas/Time"
          },
          "reason": {
            "type": "string",
            "description": "Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"ResizeStarted\" that means the underlying persistent volume is being resized. +optional"
          },
          "message": {
            "type": "string",
            "description": "Human-readable message indicating details about last transition. +optional"
          }
        },
        "description": "PersistentVolumeClaimCondition contails details about state of pvc"
      },
      "PersistentVolumeClaimSpec": {
        "type": "object",
        "properties": {
          "accessModes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1 +optional"
          },
          "selector": {
            "$ref": "#/components/schemas/LabelSelector"
          },
          "resources": {
            "$ref": "#/components/schemas/ResourceRequirements"
          },
          "volumeName": {
            "type": "string",
            "description": "VolumeName is the binding reference to the PersistentVolume backing this claim. +optional"
          },
          "storageClassName": {
            "type": "string",
            "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1 +optional"
          },
          "volumeMode": {
            "type": "string",
            "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. +optional"
          },
          "dataSource": {
            "$ref": "#/components/schemas/TypedLocalObjectReference"
          },
          "dataSourceRef": {
            "$ref": "#/components/schemas/TypedLocalObjectReference"
          }
        },
        "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes"
      },
      "PersistentVolumeClaimStatus": {
        "type": "object",
        "properties": {
          "phase": {
            "type": "string",
            "description": "Phase represents the current phase of PersistentVolumeClaim. +optional"
          },
          "accessModes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1 +optional"
          },
          "capacity": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Quantity"
            },
            "description": "Represents the actual resources of the underlying volume. +optional"
          },
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersistentVolumeClaimCondition"
            },
            "description": "Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'. +optional +patchMergeKey=type +patchStrategy=merge"
          },
          "allocatedResources": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Quantity"
            },
            "description": "The storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature. +featureGate=RecoverVolumeExpansionFailure +optional"
          },
          "resizeStatus": {
            "type": "string",
            "description": "ResizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature. +featureGate=RecoverVolumeExpansionFailure +optional"
          }
        },
        "description": "PersistentVolumeClaimStatus is the current status of a persistent volume claim."
      },
      "PersistentVolumeClaimTemplate": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/ObjectMeta"
          },
          "spec": {
            "$ref": "#/components/schemas/PersistentVolumeClaimSpec"
          }
        },
        "description": "PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource."
      },
      "PersistentVolumeClaimVolumeSource": {
        "type": "object",
        "properties": {
          "claimName": {
            "type": "string",
            "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
          },
          "readOnly": {
            "type": "boolean",
            "description": "Will force the ReadOnly setting in VolumeMounts. Default false. +optional"
          }
        },
        "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system)."
      },
      "PhotonPersistentDiskVolumeSource": {
        "type": "object",
        "properties": {
          "pdID": {
            "type": "string",
            "description": "ID that identifies Photon Controller persistent disk"
          },
          "fsType": {
            "type": "string",
            "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
          }
        },
        "description": "Represents a Photon Controller persistent disk resource."
      },
      "Plugin": {
        "type": "object",
        "properties": {
          "object": {
            "$ref": "#/components/schemas/Object"
          }
        },
        "description": "Plugin is an Object with exactly one key"
      },
      "PodAffinity": {
        "type": "object",
        "properties": {
          "requiredDuringSchedulingIgnoredDuringExecution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PodAffinityTerm"
            },
            "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. +optional"
          },
          "preferredDuringSchedulingIgnoredDuringExecution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WeightedPodAffinityTerm"
            },
            "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred. +optional"
          }
        },
        "description": "Pod affinity is a group of inter pod affinity scheduling rules."
      },
      "PodAffinityTerm": {
        "type": "object",
        "properties": {
          "labelSelector": {
            "$ref": "#/components/schemas/LabelSelector"
          },
          "namespaces": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\" +optional"
          },
          "topologyKey": {
            "type": "string",
            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
          },
          "namespaceSelector": {
            "$ref": "#/components/schemas/LabelSelector"
          }
        },
        "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running"
      },
      "PodAntiAffinity": {
        "type": "object",
        "properties": {
          "requiredDuringSchedulingIgnoredDuringExecution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PodAffinityTerm"
            },
            "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. +optional"
          },
          "preferredDuringSchedulingIgnoredDuringExecution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WeightedPodAffinityTerm"
            },
            "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred. +optional"
          }
        },
        "description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules."
      },
      "PodDNSConfig": {
        "type": "object",
        "properties": {
          "nameservers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed. +optional"
          },
          "searches": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed. +optional"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PodDNSConfigOption"
            },
            "description": "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy. +optional"
          }
        },
        "description": "PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy."
      },
      "PodDNSConfigOption": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Required."
          },
          "value": {
            "type": "string",
            "description": "+optional"
          }
        },
        "description": "PodDNSConfigOption defines DNS resolver options of a pod."
      },
      "PodDisruptionBudgetSpec": {
        "type": "object",
        "properties": {
          "minAvailable": {
            "$ref": "#/components/schemas/IntOrString"
          },
          "selector": {
            "$ref": "#/components/schemas/LabelSelector"
          },
          "maxUnavailable": {
            "$ref": "#/components/schemas/IntOrString"
          }
        },
        "description": "PodDisruptionBudgetSpec is a description of a PodDisruptionBudget."
      },
      "PodGC": {
        "type": "object",
        "properties": {
          "strategy": {
            "type": "string",
            "description": "Strategy is the strategy to use. One of \"OnPodCompletion\", \"OnPodSuccess\", \"OnWorkflowCompletion\", \"OnWorkflowSuccess\""
          },
          "labelSelector": {
            "$ref": "#/components/schemas/LabelSelector"
          }
        },
        "description": "PodGC describes how to delete completed pods as they complete"
      },
      "PodSecurityContext": {
        "type": "object",
        "properties": {
          "seLinuxOptions": {
            "$ref": "#/components/schemas/SELinuxOptions"
          },
          "windowsOptions": {
            "$ref": "#/components/schemas/WindowsSecurityContextOptions"
          },
          "runAsUser": {
            "type": "integer",
            "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows. +optional",
            "format": "int64"
          },
          "runAsGroup": {
            "type": "integer",
            "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows. +optional",
            "format": "int64"
          },
          "runAsNonRoot": {
            "type": "boolean",
            "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. +optional"
          },
          "supplementalGroups": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows. +optional"
          },
          "fsGroup": {
            "type": "integer",
            "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows. +optional",
            "format": "int64"
          },
          "sysctls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sysctl"
            },
            "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows. +optional"
          },
          "fsGroupChangePolicy": {
            "type": "string",
            "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used. Note that this field cannot be set when spec.os.name is windows. +optional"
          },
          "seccompProfile": {
            "$ref": "#/components/schemas/SeccompProfile"
          }
        },
        "description": "PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext."
      },
      "PortworxVolumeSource": {
        "type": "object",
        "properties": {
          "volumeID": {
            "type": "string",
            "description": "VolumeID uniquely identifies a Portworx volume"
          },
          "fsType": {
            "type": "string",
            "description": "FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified."
          },
          "readOnly": {
            "type": "boolean",
            "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. +optional"
          }
        },
        "description": "PortworxVolumeSource represents a Portworx volume resource."
      },
      "PreferredSchedulingTerm": {
        "type": "object",
        "properties": {
          "weight": {
            "type": "integer",
            "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
            "format": "int32"
          },
          "preference": {
            "$ref": "#/components/schemas/NodeSelectorTerm"
          }
        },
        "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op)."
      },
      "Probe": {
        "type": "object",
        "properties": {
          "handler": {
            "$ref": "#/components/schemas/ProbeHandler"
          },
          "initialDelaySeconds": {
            "type": "integer",
            "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes +optional",
            "format": "int32"
          },
          "timeoutSeconds": {
            "type": "integer",
            "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes +optional",
            "format": "int32"
          },
          "periodSeconds": {
            "type": "integer",
            "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. +optional",
            "format": "int32"
          },
          "successThreshold": {
            "type": "integer",
            "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1. +optional",
            "format": "int32"
          },
          "failureThreshold": {
            "type": "integer",
            "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1. +optional",
            "format": "int32"
          },
          "terminationGracePeriodSeconds": {
            "type": "integer",
            "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset. +optional",
            "format": "int64"
          }
        },
        "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic."
      },
      "ProbeHandler": {
        "type": "object",
        "properties": {
          "exec": {
            "$ref": "#/components/schemas/ExecAction"
          },
          "httpGet": {
            "$ref": "#/components/schemas/HTTPGetAction"
          },
          "tcpSocket": {
            "$ref": "#/components/schemas/TCPSocketAction"
          },
          "grpc": {
            "$ref": "#/components/schemas/GRPCAction"
          }
        },
        "description": "ProbeHandler defines a specific action that should be taken in a probe. One and only one of the fields must be specified."
      },
      "Project": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The resource name of the project. Format:   one project belongs to one warehouse:     warehouses/{warehouse_id}/projects/{project_id}"
          },
          "displayName": {
            "type": "string",
            "description": "Human readable project name."
          },
          "description": {
            "type": "string",
            "description": "Description of the project."
          },
          "createTime": {
            "readOnly": true,
            "type": "string",
            "description": "Timestamp when the project created.",
            "format": "date-time"
          },
          "updateTime": {
            "readOnly": true,
            "type": "string",
            "description": "Timestamp when the project last updated.",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Metadata associated with the project."
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "not readonly k-v info"
          },
          "slug": {
            "type": "string",
            "description": "the slug from display name user input."
          },
          "isArchived": {
            "type": "boolean",
            "description": "The project is archived."
          },
          "visibility": {
            "type": "integer",
            "description": "The project visibility.",
            "format": "enum"
          }
        },
        "description": "Project like GitHub Repository. A project is a collection of project-level devices, deviceGroups, events, records, scenes, sceneSets. Considering that the amount of Project-related resources will be very large, we remove the Project's inline resources like `repeated string scenes` and require additional List requests to get them. You can list them by their own #list rpc like #ListEvents with url: \"/dataplatform/v1alpha1/{parent=warehouses/*/projects/*}/events\". A project is a main authorized resource (the other is warehouse)."
      },
      "ProjectedVolumeSource": {
        "type": "object",
        "properties": {
          "sources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VolumeProjection"
            },
            "description": "list of volume projections +optional"
          },
          "defaultMode": {
            "type": "integer",
            "description": "Mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. +optional",
            "format": "int32"
          }
        },
        "description": "Represents a projected volume source"
      },
      "Prometheus": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name is the name of the metric"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricLabel"
            },
            "description": "Labels is a list of metric labels"
          },
          "help": {
            "type": "string",
            "description": "Help is a string that describes the metric"
          },
          "when": {
            "type": "string",
            "description": "When is a conditional statement that decides when to emit the metric"
          },
          "gauge": {
            "$ref": "#/components/schemas/Gauge"
          },
          "histogram": {
            "$ref": "#/components/schemas/Histogram"
          },
          "counter": {
            "$ref": "#/components/schemas/Counter"
          }
        },
        "description": "Prometheus is a prometheus metric to be emitted"
      },
      "Quantity": {
        "type": "object",
        "properties": {
          "string": {
            "type": "string"
          }
        },
        "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors. The serialization format is: <quantity>        ::= <signedNumber><suffix>   (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.) <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei   (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html) <decimalSI>       ::= m | \"\" | k | M | G | T | P | E   (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.) <decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber> No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities. When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized. Before serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:   a. No precision is lost   b. No fractional digits will be emitted   c. The exponent (or suffix) is as large as possible. The sign will be omitted unless the number is negative. Examples:   1.5 will be serialized as \"1500m\"   1.5Gi will be serialized as \"1536Mi\" Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise. Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.) This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation. +protobuf=true +protobuf.embed=string +protobuf.options.marshal=false +protobuf.options.(gogoproto.goproto_stringer)=false +k8s:deepcopy-gen=true +k8s:openapi-gen=true"
      },
      "QuobyteVolumeSource": {
        "type": "object",
        "properties": {
          "registry": {
            "type": "string",
            "description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes"
          },
          "volume": {
            "type": "string",
            "description": "Volume is a string that references an already created Quobyte volume by name."
          },
          "readOnly": {
            "type": "boolean",
            "description": "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false. +optional"
          },
          "user": {
            "type": "string",
            "description": "User to map volume access to Defaults to serivceaccount user +optional"
          },
          "group": {
            "type": "string",
            "description": "Group to map volume access to Default is no group +optional"
          },
          "tenant": {
            "type": "string",
            "description": "Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin +optional"
          }
        },
        "description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling."
      },
      "RBDVolumeSource": {
        "type": "object",
        "properties": {
          "monitors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
          },
          "image": {
            "type": "string",
            "description": "The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
          },
          "fsType": {
            "type": "string",
            "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine +optional"
          },
          "pool": {
            "type": "string",
            "description": "The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it +optional"
          },
          "user": {
            "type": "string",
            "description": "The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it +optional"
          },
          "keyring": {
            "type": "string",
            "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it +optional"
          },
          "secretRef": {
            "$ref": "#/components/schemas/LocalObjectReference"
          },
          "readOnly": {
            "type": "boolean",
            "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it +optional"
          }
        },
        "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling."
      },
      "RawArtifact": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "Data is the string contents of the artifact"
          }
        },
        "description": "RawArtifact allows raw string content to be placed as an artifact in a container"
      },
      "Record": {
        "required": [
          "title",
          "description",
          "head"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name of the record. Maybe empty in some requests."
          },
          "title": {
            "type": "string",
            "description": "Record title."
          },
          "description": {
            "type": "string",
            "description": "Description of the record."
          },
          "createTime": {
            "readOnly": true,
            "type": "string",
            "description": "Timestamp when the record was created.",
            "format": "date-time"
          },
          "updateTime": {
            "readOnly": true,
            "type": "string",
            "description": "Timestamp when the record was last updated.",
            "format": "date-time"
          },
          "device": {
            "$ref": "#/components/schemas/Device"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Metadata associated with the record."
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "description": "Not readonly k-v info."
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            },
            "description": "Events associated with the record."
          },
          "thumbnailUri": {
            "type": "string",
            "description": "Thumbnail to display."
          },
          "head": {
            "$ref": "#/components/schemas/Revision"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "description": "Tags of the record."
          },
          "isArchived": {
            "type": "boolean",
            "description": "The record is archived. Empty when it's not archived."
          }
        },
        "description": "Record represents the collection of robotics raw data. It versioned by revisions and created by users, devices or workflows.      +------------+  headRevisionSha256:sha256      |  Record 1  |-------------------------+    +->            |                        |    | +------<-----+<\\                      |    |         -\\      ---\\                  |    |           -\\        --\\               |    |record_id:id -\\         --\\            |    |               -\\          ---\\        v    |------------+ +------------+ +------------+    | Revision 1 | | Revision 2 | | Revision 3 |    |            | |            | |            |    |------------+ +------------+ +------------+"
      },
      "RefreshBlobMediaRequest": {
        "required": [
          "blob"
        ],
        "type": "object",
        "properties": {
          "blob": {
            "type": "string",
            "description": "The blob to update the media. Only support warehouse slug in the resource name."
          },
          "mediaType": {
            "type": "string",
            "description": "See https://en.wikipedia.org/wiki/Media_type. For example, we use `application/vnd.ros1.bag` for ros1 bag."
          },
          "media": {
            "$ref": "#/components/schemas/GoogleProtobufAny"
          }
        },
        "description": "Request message for `UpdateBlobState`."
      },
      "ResourceFieldSelector": {
        "type": "object",
        "properties": {
          "containerName": {
            "type": "string",
            "description": "Container name: required for volumes, optional for env vars +optional"
          },
          "resource": {
            "type": "string",
            "description": "Required: resource to select"
          },
          "divisor": {
            "$ref": "#/components/schemas/Quantity"
          }
        },
        "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format +structType=atomic"
      },
      "ResourceRequirements": {
        "type": "object",
        "properties": {
          "limits": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Quantity"
            },
            "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ +optional"
          },
          "requests": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Quantity"
            },
            "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ +optional"
          }
        },
        "description": "ResourceRequirements describes the compute resource requirements."
      },
      "ResourceTemplate": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "Action is the action to perform to the resource. Must be one of: get, create, apply, delete, replace, patch"
          },
          "mergeStrategy": {
            "type": "string",
            "description": "MergeStrategy is the strategy used to merge a patch. It defaults to \"strategic\" Must be one of: strategic, merge, json"
          },
          "manifest": {
            "type": "string",
            "description": "Manifest contains the kubernetes manifest"
          },
          "manifestFrom": {
            "$ref": "#/components/schemas/ManifestFrom"
          },
          "setOwnerReference": {
            "type": "boolean",
            "description": "SetOwnerReference sets the reference to the workflow on the OwnerReference of generated resource."
          },
          "successCondition": {
            "type": "string",
            "description": "SuccessCondition is a label selector expression which describes the conditions of the k8s resource in which it is acceptable to proceed to the following step"
          },
          "failureCondition": {
            "type": "string",
            "description": "FailureCondition is a label selector expression which describes the conditions of the k8s resource in which the step was considered failed"
          },
          "flags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Flags is a set of additional options passed to kubectl before submitting a resource I.e. to disable resource validation: flags: [ \t\"--validate=false\"  # disable resource validation ]"
          }
        },
        "description": "ResourceTemplate is a template subtype to manipulate kubernetes resources"
      },
      "RetryAffinity": {
        "type": "object",
        "properties": {
          "nodeAntiAffinity": {
            "$ref": "#/components/schemas/RetryNodeAntiAffinity"
          }
        },
        "description": "RetryAffinity prevents running steps on the same host."
      },
      "RetryNodeAntiAffinity": {
        "type": "object",
        "properties": {},
        "description": "RetryNodeAntiAffinity is a placeholder for future expansion, only empty nodeAntiAffinity is allowed. In order to prevent running steps on the same host, it uses \"kubernetes.io/hostname\"."
      },
      "RetryStrategy": {
        "type": "object",
        "properties": {
          "limit": {
            "$ref": "#/components/schemas/IntOrString"
          },
          "retryPolicy": {
            "type": "string",
            "description": "RetryPolicy is a policy of NodePhase statuses that will be retried"
          },
          "backoff": {
            "$ref": "#/components/schemas/Backoff"
          },
          "affinity": {
            "$ref": "#/components/schemas/RetryAffinity"
          },
          "expression": {
            "type": "string",
            "description": "Expression is a condition expression for when a node will be retried. If it evaluates to false, the node will not be retried and the retry strategy will be ignored"
          }
        },
        "description": "RetryStrategy provides controls on how to retry a workflow step"
      },
      "Revision": {
        "required": [
          "config"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name of the revision. Optional in the request and required in the response."
          },
          "description": {
            "readOnly": true,
            "type": "string",
            "description": "Revision description. This description is for debugging/logging only but not for clients to show."
          },
          "createTime": {
            "readOnly": true,
            "type": "string",
            "description": "Creation timestamp.",
            "format": "date-time"
          },
          "sha256": {
            "readOnly": true,
            "type": "string",
            "description": "The deterministic digest of the revision. Calculated by service."
          },
          "parentSha256": {
            "readOnly": true,
            "type": "string",
            "description": "Predecessor revision. Empty means it's an ancestor revision."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            },
            "description": "Files referenced by the revision. You can create a revision with either files or transformations."
          },
          "transformations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File_Transformation"
            },
            "description": "New files compared to the previous revision. See more details in the documentation of the `File.Transformation` message."
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "workflow": {
            "$ref": "#/components/schemas/Workflow"
          },
          "device": {
            "$ref": "#/components/schemas/Device"
          },
          "config": {
            "$ref": "#/components/schemas/ConfigMedia"
          }
        },
        "description": "Revision describes one historical version of the record."
      },
      "S3Artifact": {
        "type": "object",
        "properties": {
          "s3Bucket": {
            "$ref": "#/components/schemas/S3Bucket"
          },
          "key": {
            "type": "string",
            "description": "Key is the key in the bucket where the artifact resides"
          }
        },
        "description": "S3Artifact is the location of an S3 artifact"
      },
      "S3ArtifactRepository": {
        "type": "object",
        "properties": {
          "s3Bucket": {
            "$ref": "#/components/schemas/S3Bucket"
          },
          "keyFormat": {
            "type": "string",
            "description": "KeyFormat is defines the format of how to store keys. Can reference workflow variables"
          },
          "keyPrefix": {
            "type": "string",
            "description": "KeyPrefix is prefix used as part of the bucket key in which the controller will store artifacts. DEPRECATED. Use KeyFormat instead"
          }
        },
        "description": "S3ArtifactRepository defines the controller configuration for an S3 artifact repository"
      },
      "S3Bucket": {
        "type": "object",
        "properties": {
          "endpoint": {
            "type": "string",
            "description": "Endpoint is the hostname of the bucket endpoint"
          },
          "bucket": {
            "type": "string",
            "description": "Bucket is the name of the bucket"
          },
          "region": {
            "type": "string",
            "description": "Region contains the optional bucket region"
          },
          "insecure": {
            "type": "boolean",
            "description": "Insecure will connect to the service with TLS"
          },
          "accessKeySecret": {
            "$ref": "#/components/schemas/SecretKeySelector"
          },
          "secretKeySecret": {
            "$ref": "#/components/schemas/SecretKeySelector"
          },
          "roleARN": {
            "type": "string",
            "description": "RoleARN is the Amazon Resource Name (ARN) of the role to assume."
          },
          "useSDKCreds": {
            "type": "boolean",
            "description": "UseSDKCreds tells the driver to figure out credentials based on sdk defaults."
          },
          "createBucketIfNotPresent": {
            "$ref": "#/components/schemas/CreateS3BucketOptions"
          },
          "encryptionOptions": {
            "$ref": "#/components/schemas/S3EncryptionOptions"
          }
        },
        "description": "S3Bucket contains the access information required for interfacing with an S3 bucket"
      },
      "S3EncryptionOptions": {
        "type": "object",
        "properties": {
          "kmsKeyId": {
            "type": "string",
            "description": "KMSKeyId tells the driver to encrypt the object using the specified KMS Key."
          },
          "kmsEncryptionContext": {
            "type": "string",
            "description": "KmsEncryptionContext is a json blob that contains an encryption context. See https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context for more information"
          },
          "enableEncryption": {
            "type": "boolean",
            "description": "EnableEncryption tells the driver to encrypt objects if set to true. If kmsKeyId and serverSideCustomerKeySecret are not set, SSE-S3 will be used"
          },
          "serverSideCustomerKeySecret": {
            "$ref": "#/components/schemas/SecretKeySelector"
          }
        },
        "description": "S3EncryptionOptions used to determine encryption options during s3 operations"
      },
      "SELinuxOptions": {
        "type": "object",
        "properties": {
          "user": {
            "type": "string",
            "description": "User is a SELinux user label that applies to the container. +optional"
          },
          "role": {
            "type": "string",
            "description": "Role is a SELinux role label that applies to the container. +optional"
          },
          "type": {
            "type": "string",
            "description": "Type is a SELinux type label that applies to the container. +optional"
          },
          "level": {
            "type": "string",
            "description": "Level is SELinux level label that applies to the container. +optional"
          }
        },
        "description": "SELinuxOptions are the labels to be applied to the container"
      },
      "ScaleIOVolumeSource": {
        "type": "object",
        "properties": {
          "gateway": {
            "type": "string",
            "description": "The host address of the ScaleIO API Gateway."
          },
          "system": {
            "type": "string",
            "description": "The name of the storage system as configured in ScaleIO."
          },
          "secretRef": {
            "$ref": "#/components/schemas/LocalObjectReference"
          },
          "sslEnabled": {
            "type": "boolean",
            "description": "Flag to enable/disable SSL communication with Gateway, default false +optional"
          },
          "protectionDomain": {
            "type": "string",
            "description": "The name of the ScaleIO Protection Domain for the configured storage. +optional"
          },
          "storagePool": {
            "type": "string",
            "description": "The ScaleIO Storage Pool associated with the protection domain. +optional"
          },
          "storageMode": {
            "type": "string",
            "description": "Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned. +optional"
          },
          "volumeName": {
            "type": "string",
            "description": "The name of a volume already created in the ScaleIO system that is associated with this volume source."
          },
          "fsType": {
            "type": "string",
            "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\". +optional"
          },
          "readOnly": {
            "type": "boolean",
            "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. +optional"
          }
        },
        "description": "ScaleIOVolumeSource represents a persistent ScaleIO volume"
      },
      "ScriptTemplate": {
        "type": "object",
        "properties": {
          "container": {
            "$ref": "#/components/schemas/Container"
          },
          "source": {
            "type": "string",
            "description": "Source contains the source code of the script to execute"
          }
        },
        "description": "ScriptTemplate is a template subtype to enable scripting through code steps"
      },
      "SeccompProfile": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "type indicates which kind of seccomp profile will be applied. Valid options are: Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied. +unionDiscriminator"
          },
          "localhostProfile": {
            "type": "string",
            "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is \"Localhost\". +optional"
          }
        },
        "description": "SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set. +union"
      },
      "SecretEnvSource": {
        "type": "object",
        "properties": {
          "localObjectReference": {
            "$ref": "#/components/schemas/LocalObjectReference"
          },
          "optional": {
            "type": "boolean",
            "description": "Specify whether the Secret must be defined +optional"
          }
        },
        "description": "SecretEnvSource selects a Secret to populate the environment variables with. The contents of the target Secret's Data field will represent the key-value pairs as environment variables."
      },
      "SecretKeySelector": {
        "type": "object",
        "properties": {
          "localObjectReference": {
            "$ref": "#/components/schemas/LocalObjectReference"
          },
          "key": {
            "type": "string",
            "description": "The key of the secret to select from.  Must be a valid secret key."
          },
          "optional": {
            "type": "boolean",
            "description": "Specify whether the Secret or its key must be defined +optional"
          }
        },
        "description": "SecretKeySelector selects a key of a Secret. +structType=atomic"
      },
      "SecretProjection": {
        "type": "object",
        "properties": {
          "localObjectReference": {
            "$ref": "#/components/schemas/LocalObjectReference"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyToPath"
            },
            "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'. +optional"
          },
          "optional": {
            "type": "boolean",
            "description": "Specify whether the Secret or its key must be defined +optional"
          }
        },
        "description": "Adapts a secret into a projected volume. The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode."
      },
      "SecretVolumeSource": {
        "type": "object",
        "properties": {
          "secretName": {
            "type": "string",
            "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret +optional"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyToPath"
            },
            "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'. +optional"
          },
          "defaultMode": {
            "type": "integer",
            "description": "Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. +optional",
            "format": "int32"
          },
          "optional": {
            "type": "boolean",
            "description": "Specify whether the Secret or its keys must be defined +optional"
          }
        },
        "description": "Adapts a Secret into a volume. The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling."
      },
      "SecurityContext": {
        "type": "object",
        "properties": {
          "capabilities": {
            "$ref": "#/components/schemas/Capabilities"
          },
          "privileged": {
            "type": "boolean",
            "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows. +optional"
          },
          "seLinuxOptions": {
            "$ref": "#/components/schemas/SELinuxOptions"
          },
          "windowsOptions": {
            "$ref": "#/components/schemas/WindowsSecurityContextOptions"
          },
          "runAsUser": {
            "type": "integer",
            "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows. +optional",
            "format": "int64"
          },
          "runAsGroup": {
            "type": "integer",
            "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows. +optional",
            "format": "int64"
          },
          "runAsNonRoot": {
            "type": "boolean",
            "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. +optional"
          },
          "readOnlyRootFilesystem": {
            "type": "boolean",
            "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows. +optional"
          },
          "allowPrivilegeEscalation": {
            "type": "boolean",
            "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows. +optional"
          },
          "procMount": {
            "type": "string",
            "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows. +optional"
          },
          "seccompProfile": {
            "$ref": "#/components/schemas/SeccompProfile"
          }
        },
        "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence."
      },
      "SemaphoreHolding": {
        "type": "object",
        "properties": {
          "semaphore": {
            "type": "string",
            "description": "Semaphore stores the semaphore name."
          },
          "holders": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Holders stores the list of current holder names in the workflow. +listType=atomic"
          }
        }
      },
      "SemaphoreRef": {
        "type": "object",
        "properties": {
          "configMapKeyRef": {
            "$ref": "#/components/schemas/ConfigMapKeySelector"
          }
        },
        "description": "SemaphoreRef is a reference of Semaphore"
      },
      "SemaphoreStatus": {
        "type": "object",
        "properties": {
          "holding": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SemaphoreHolding"
            },
            "description": "Holding stores the list of resource acquired synchronization lock for workflows."
          },
          "waiting": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SemaphoreHolding"
            },
            "description": "Waiting indicates the list of current synchronization lock holders."
          }
        }
      },
      "Sequence": {
        "type": "object",
        "properties": {
          "count": {
            "$ref": "#/components/schemas/IntOrString"
          },
          "start": {
            "$ref": "#/components/schemas/IntOrString"
          },
          "end": {
            "$ref": "#/components/schemas/IntOrString"
          },
          "format": {
            "type": "string",
            "description": "Format is a printf format string to format the value in the sequence"
          }
        },
        "description": "Sequence expands a workflow step into numeric range"
      },
      "ServiceAccountTokenProjection": {
        "type": "object",
        "properties": {
          "audience": {
            "type": "string",
            "description": "Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver. +optional"
          },
          "expirationSeconds": {
            "type": "integer",
            "description": "ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes. +optional",
            "format": "int64"
          },
          "path": {
            "type": "string",
            "description": "Path is the path relative to the mount point of the file to project the token into."
          }
        },
        "description": "ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise)."
      },
      "StatRecordsRequest": {
        "required": [
          "parent"
        ],
        "type": "object",
        "properties": {
          "parent": {
            "type": "string",
            "description": "The parent to stat records from. Pattern: warehouses/{warehouse_id}/projects/{project_id}"
          },
          "filter": {
            "type": "string",
            "description": "An expression for filtering the results of the request. camel or lower_underscore both supported supported fields: title, description, createTime, updateTime, warehouseId, projectId, deviceId, metadata->${key}, head, startTime, endTime album.id, event.id support json fields to use or condition query: labels. Example: labels=[label_id_1,label_id_2,...]"
          }
        },
        "description": "Request message for StatRecords."
      },
      "StatRecordsResponse": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "the total count of records.",
            "format": "int32"
          },
          "labelStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatRecordsResponse_LabelStat"
            },
            "description": "the label stats list for records."
          }
        },
        "description": "Response message for StatRecords."
      },
      "StatRecordsResponse_LabelStat": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "label display name."
          },
          "recordCount": {
            "type": "integer",
            "description": "record count in a label.",
            "format": "int32"
          }
        },
        "description": "the label stat for records."
      },
      "State": {
        "type": "object",
        "properties": {
          "phase": {
            "type": "integer",
            "description": "The phase of blob storage is a simple, high-level summary of where the blob is in its lifecycle.",
            "format": "enum"
          },
          "reason": {
            "type": "string",
            "description": "A brief CamelCase message indicating details about why the blob storage is in this phase."
          },
          "message": {
            "type": "string",
            "description": "A human readable message indicating details about why the blob storage is in this phase."
          },
          "createTime": {
            "type": "string",
            "description": "state changed time.",
            "format": "date-time"
          }
        },
        "description": "Describe the recently observed storage state of a blob."
      },
      "Status": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GoogleProtobufAny"
            },
            "description": "A list of messages that carry the error details.  There is a common set of message types for APIs to use."
          }
        },
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."
      },
      "StorageOSVolumeSource": {
        "type": "object",
        "properties": {
          "volumeName": {
            "type": "string",
            "description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace."
          },
          "volumeNamespace": {
            "type": "string",
            "description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created. +optional"
          },
          "fsType": {
            "type": "string",
            "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. +optional"
          },
          "readOnly": {
            "type": "boolean",
            "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. +optional"
          },
          "secretRef": {
            "$ref": "#/components/schemas/LocalObjectReference"
          }
        },
        "description": "Represents a StorageOS persistent volume resource."
      },
      "SuggestRecordsSearchRequest": {
        "required": [
          "project",
          "text"
        ],
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "description": "The parent project resource name."
          },
          "text": {
            "type": "string",
            "description": "search text"
          }
        },
        "description": "Request for SuggestRecordsSearch"
      },
      "SuggestRecordsSearchResponse": {
        "type": "object",
        "properties": {
          "suggestions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuggestRecordsSearchResponse_RecordSuggest"
            },
            "description": "The record pre-signed URL."
          }
        },
        "description": "Response for SuggestRecordSearch"
      },
      "SuggestRecordsSearchResponse_RecordSuggest": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "suggest text"
          }
        },
        "description": "RecordSuggest"
      },
      "SuppliedValueFrom": {
        "type": "object",
        "properties": {},
        "description": "SuppliedValueFrom is a placeholder for a value to be filled in directly, either through the CLI, API, etc."
      },
      "SuspendTemplate": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "string",
            "description": "Duration is the seconds to wait before automatically resuming a template"
          }
        },
        "description": "SuspendTemplate is a template subtype to suspend a workflow at a predetermined point in time"
      },
      "Synchronization": {
        "type": "object",
        "properties": {
          "semaphore": {
            "$ref": "#/components/schemas/SemaphoreRef"
          },
          "mutex": {
            "$ref": "#/components/schemas/Mutex"
          }
        },
        "description": "Synchronization holds synchronization lock configuration"
      },
      "SynchronizationStatus": {
        "type": "object",
        "properties": {
          "semaphore": {
            "$ref": "#/components/schemas/SemaphoreStatus"
          },
          "mutex": {
            "$ref": "#/components/schemas/MutexStatus"
          }
        },
        "description": "SynchronizationStatus stores the status of semaphore and mutex."
      },
      "Sysctl": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of a property to set"
          },
          "value": {
            "type": "string",
            "description": "Value of a property to set"
          }
        },
        "description": "Sysctl defines a kernel parameter to be set"
      },
      "TCPSocketAction": {
        "type": "object",
        "properties": {
          "port": {
            "$ref": "#/components/schemas/IntOrString"
          },
          "host": {
            "type": "string",
            "description": "Optional: Host name to connect to, defaults to the pod IP. +optional"
          }
        },
        "description": "TCPSocketAction describes an action based on opening a socket"
      },
      "TTLStrategy": {
        "type": "object",
        "properties": {
          "secondsAfterCompletion": {
            "type": "integer",
            "description": "SecondsAfterCompletion is the number of seconds to live after completion",
            "format": "int32"
          },
          "secondsAfterSuccess": {
            "type": "integer",
            "description": "SecondsAfterSuccess is the number of seconds to live after success",
            "format": "int32"
          },
          "secondsAfterFailure": {
            "type": "integer",
            "description": "SecondsAfterFailure is the number of seconds to live after failure",
            "format": "int32"
          }
        },
        "description": "TTLStrategy is the strategy for the time to live depending on if the workflow succeeded or failed"
      },
      "Tag": {
        "required": [
          "title",
          "revision"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Tag resource name. optional in the request, but always output in the response."
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "workflow": {
            "$ref": "#/components/schemas/Workflow"
          },
          "device": {
            "$ref": "#/components/schemas/Device"
          },
          "description": {
            "type": "string",
            "description": "Descriptor of the tag."
          },
          "createTime": {
            "readOnly": true,
            "type": "string",
            "description": "Creation timestamp.",
            "format": "date-time"
          },
          "title": {
            "type": "string",
            "description": "Version text of the tag. It's unique in one record. e.g: \"v1.0.0\", \"v1\"."
          },
          "revision": {
            "$ref": "#/components/schemas/Revision"
          },
          "sha256": {
            "readOnly": true,
            "type": "string",
            "description": "hash of the tag. It's difference from the revision hash. It's calculated by the server."
          }
        },
        "description": "Tag describes a specific revision of the record."
      },
      "TarStrategy": {
        "type": "object",
        "properties": {
          "compressionLevel": {
            "type": "integer",
            "description": "CompressionLevel specifies the gzip compression level to use for the artifact. Defaults to gzip.DefaultCompression.",
            "format": "int32"
          }
        },
        "description": "TarStrategy will tar and gzip the file or directory when saving"
      },
      "Task": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name of the task. A task belongs to one project. Format:    `warehouses/{warehouse_id}/projects/{project_id}/tasks/{task_id}`"
          },
          "assigner": {
            "type": "string",
            "description": "The assigner Format: users/{user}"
          },
          "assignee": {
            "type": "string",
            "description": "The assignee Format: users/{user}"
          },
          "state": {
            "type": "integer",
            "description": "The task state",
            "format": "enum"
          },
          "assignedTime": {
            "type": "string",
            "description": "The assigned time",
            "format": "date-time"
          },
          "createTime": {
            "readOnly": true,
            "type": "string",
            "description": "Timestamp when the task created.",
            "format": "date-time"
          },
          "updateTime": {
            "readOnly": true,
            "type": "string",
            "description": "Timestamp when the task last updated.",
            "format": "date-time"
          },
          "category": {
            "type": "integer",
            "description": "Task categories.",
            "format": "enum"
          },
          "details": {
            "$ref": "#/components/schemas/GoogleProtobufAny"
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          }
        },
        "description": "The task describes an assigned task, can be created by event or others."
      },
      "Template": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name is the name of the template"
          },
          "inputs": {
            "$ref": "#/components/schemas/Inputs"
          },
          "outputs": {
            "$ref": "#/components/schemas/Outputs"
          },
          "nodeSelector": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "NodeSelector is a selector to schedule this step of the workflow to be run on the selected node(s). Overrides the selector set at the workflow level."
          },
          "affinity": {
            "$ref": "#/components/schemas/Affinity"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "daemon": {
            "type": "boolean",
            "description": "Deamon will allow a workflow to proceed to the next step so long as the container reaches readiness"
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParallelSteps"
            },
            "description": "Steps define a series of sequential/parallel workflow steps"
          },
          "container": {
            "$ref": "#/components/schemas/Container"
          },
          "containerSet": {
            "$ref": "#/components/schemas/ContainerSetTemplate"
          },
          "script": {
            "$ref": "#/components/schemas/ScriptTemplate"
          },
          "resource": {
            "$ref": "#/components/schemas/ResourceTemplate"
          },
          "dag": {
            "$ref": "#/components/schemas/DAGTemplate"
          },
          "suspend": {
            "$ref": "#/components/schemas/SuspendTemplate"
          },
          "data": {
            "$ref": "#/components/schemas/Data"
          },
          "http": {
            "$ref": "#/components/schemas/HTTP"
          },
          "plugin": {
            "$ref": "#/components/schemas/Plugin"
          },
          "volumes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Volume"
            },
            "description": "Volumes is a list of volumes that can be mounted by containers in a template. +patchStrategy=merge +patchMergeKey=name"
          },
          "initContainers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserContainer"
            },
            "description": "InitContainers is a list of containers which run before the main container. +patchStrategy=merge +patchMergeKey=name"
          },
          "sidecars": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserContainer"
            },
            "description": "Sidecars is a list of containers which run alongside the main container Sidecars are automatically killed when the main container completes +patchStrategy=merge +patchMergeKey=name"
          },
          "archiveLocation": {
            "$ref": "#/components/schemas/ArtifactLocation"
          },
          "activeDeadlineSeconds": {
            "$ref": "#/components/schemas/IntOrString"
          },
          "retryStrategy": {
            "$ref": "#/components/schemas/RetryStrategy"
          },
          "parallelism": {
            "type": "integer",
            "description": "Parallelism limits the max total parallel pods that can execute at the same time within the boundaries of this template invocation. If additional steps/dag templates are invoked, the pods created by those templates will not be counted towards this total.",
            "format": "int64"
          },
          "failFast": {
            "type": "boolean",
            "description": "FailFast, if specified, will fail this template if any of its child pods has failed. This is useful for when this template is expanded with `withItems`, etc."
          },
          "tolerations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Toleration"
            },
            "description": "Tolerations to apply to workflow pods. +patchStrategy=merge +patchMergeKey=key"
          },
          "schedulerName": {
            "type": "string",
            "description": "If specified, the pod will be dispatched by specified scheduler. Or it will be dispatched by workflow scope scheduler if specified. If neither specified, the pod will be dispatched by default scheduler. +optional"
          },
          "priorityClassName": {
            "type": "string",
            "description": "PriorityClassName to apply to workflow pods."
          },
          "priority": {
            "type": "integer",
            "description": "Priority to apply to workflow pods.",
            "format": "int32"
          },
          "serviceAccountName": {
            "type": "string",
            "description": "ServiceAccountName to apply to workflow pods"
          },
          "automountServiceAccountToken": {
            "type": "boolean",
            "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in pods. ServiceAccountName of ExecutorConfig must be specified if this value is false."
          },
          "executor": {
            "$ref": "#/components/schemas/ExecutorConfig"
          },
          "hostAliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HostAlias"
            },
            "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod spec +patchStrategy=merge +patchMergeKey=ip"
          },
          "securityContext": {
            "$ref": "#/components/schemas/PodSecurityContext"
          },
          "podSpecPatch": {
            "type": "string",
            "description": "PodSpecPatch holds strategic merge patch to apply against the pod spec. Allows parameterization of container fields which are not strings (e.g. resource limits)."
          },
          "metrics": {
            "$ref": "#/components/schemas/Metrics"
          },
          "synchronization": {
            "$ref": "#/components/schemas/Synchronization"
          },
          "memoize": {
            "$ref": "#/components/schemas/Memoize"
          },
          "timeout": {
            "type": "string",
            "description": "Timeout allows to set the total node execution timeout duration counting from the node's start time. This duration also includes time in which the node spends in Pending state. This duration may not be applied to Step or DAG templates."
          }
        },
        "description": "Template is a reusable and composable unit of execution in a workflow"
      },
      "TemplateRef": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name is the resource name of the template."
          },
          "template": {
            "type": "string",
            "description": "Template is the name of referred template in the resource."
          },
          "clusterScope": {
            "type": "boolean",
            "description": "ClusterScope indicates the referred template is cluster scoped (i.e. a ClusterWorkflowTemplate)."
          }
        },
        "description": "TemplateRef is a reference of template resource."
      },
      "Time": {
        "type": "object",
        "properties": {
          "seconds": {
            "type": "integer",
            "description": "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
            "format": "int64"
          },
          "nanos": {
            "type": "integer",
            "description": "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.",
            "format": "int32"
          }
        },
        "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers. +protobuf.options.marshal=false +protobuf.as=Timestamp +protobuf.options.(gogoproto.goproto_stringer)=false"
      },
      "Toleration": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys. +optional"
          },
          "operator": {
            "type": "string",
            "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category. +optional"
          },
          "value": {
            "type": "string",
            "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string. +optional"
          },
          "effect": {
            "type": "string",
            "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute. +optional"
          },
          "tolerationSeconds": {
            "type": "integer",
            "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system. +optional",
            "format": "int64"
          }
        },
        "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>."
      },
      "TransformationStep": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "Expression defines an expr expression to apply"
          }
        }
      },
      "TypedLocalObjectReference": {
        "type": "object",
        "properties": {
          "apiGroup": {
            "type": "string",
            "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required. +optional"
          },
          "kind": {
            "type": "string",
            "description": "Kind is the type of resource being referenced"
          },
          "name": {
            "type": "string",
            "description": "Name is the name of resource being referenced"
          }
        },
        "description": "TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace. +structType=atomic"
      },
      "User": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name of the user. Format:   available for all users     users/{user_id}"
          },
          "nickname": {
            "type": "string",
            "description": "user nickname."
          },
          "email": {
            "type": "string",
            "description": "user email."
          },
          "avatar": {
            "type": "string",
            "description": "user avatar."
          },
          "phoneNumber": {
            "type": "string",
            "description": "user phone number."
          },
          "countryCallingCode": {
            "type": "string",
            "description": "user phone number country code."
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Metadata associated with the warehouse."
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "not readonly k-v info"
          },
          "createTime": {
            "readOnly": true,
            "type": "string",
            "description": "Timestamp when the user created.",
            "format": "date-time"
          },
          "updateTime": {
            "readOnly": true,
            "type": "string",
            "description": "Timestamp when the user last updated.",
            "format": "date-time"
          }
        },
        "description": "User represents a user in the system."
      },
      "UserContainer": {
        "type": "object",
        "properties": {
          "container": {
            "$ref": "#/components/schemas/Container"
          },
          "mirrorVolumeMounts": {
            "type": "boolean",
            "description": "MirrorVolumeMounts will mount the same volumes specified in the main container to the container (including artifacts), at the same mountPaths. This enables dind daemon to partially see the same filesystem as the main container in order to use features such as docker volume binding"
          }
        },
        "description": "UserContainer is a container specified by a user."
      },
      "ValueFrom": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path in the container to retrieve an output parameter value from in container templates"
          },
          "jsonPath": {
            "type": "string",
            "description": "JSONPath of a resource to retrieve an output parameter value from in resource templates"
          },
          "jqFilter": {
            "type": "string",
            "description": "JQFilter expression against the resource object in resource templates"
          },
          "event": {
            "type": "string",
            "description": "Selector (https://github.com/antonmedv/expr) that is evaluated against the event to get the value of the parameter. E.g. `payload.message`"
          },
          "parameter": {
            "type": "string",
            "description": "Parameter reference to a step or dag task in which to retrieve an output parameter value from (e.g. '{{steps.mystep.outputs.myparam}}')"
          },
          "supplied": {
            "$ref": "#/components/schemas/SuppliedValueFrom"
          },
          "configMapKeyRef": {
            "$ref": "#/components/schemas/ConfigMapKeySelector"
          },
          "default": {
            "type": "string",
            "description": "Default specifies a value to be used if retrieving the value from the specified source fails"
          },
          "expression": {
            "type": "string",
            "description": "Expression, if defined, is evaluated to specify the value for the parameter"
          }
        },
        "description": "ValueFrom describes a location in which to obtain the value to a parameter"
      },
      "Volume": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
          },
          "volumeSource": {
            "$ref": "#/components/schemas/VolumeSource"
          }
        },
        "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod."
      },
      "VolumeClaimGC": {
        "type": "object",
        "properties": {
          "strategy": {
            "type": "string",
            "description": "Strategy is the strategy to use. One of \"OnWorkflowCompletion\", \"OnWorkflowSuccess\""
          }
        },
        "description": "VolumeClaimGC describes how to delete volumes from completed Workflows"
      },
      "VolumeDevice": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name must match the name of a persistentVolumeClaim in the pod"
          },
          "devicePath": {
            "type": "string",
            "description": "devicePath is the path inside of the container that the device will be mapped to."
          }
        },
        "description": "volumeDevice describes a mapping of a raw block device within a container."
      },
      "VolumeMount": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "This must match the Name of a Volume."
          },
          "readOnly": {
            "type": "boolean",
            "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false. +optional"
          },
          "mountPath": {
            "type": "string",
            "description": "Path within the container at which the volume should be mounted.  Must not contain ':'."
          },
          "subPath": {
            "type": "string",
            "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root). +optional"
          },
          "mountPropagation": {
            "type": "string",
            "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10. +optional"
          },
          "subPathExpr": {
            "type": "string",
            "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive. +optional"
          }
        },
        "description": "VolumeMount describes a mounting of a Volume within a container."
      },
      "VolumeProjection": {
        "type": "object",
        "properties": {
          "secret": {
            "$ref": "#/components/schemas/SecretProjection"
          },
          "downwardAPI": {
            "$ref": "#/components/schemas/DownwardAPIProjection"
          },
          "configMap": {
            "$ref": "#/components/schemas/ConfigMapProjection"
          },
          "serviceAccountToken": {
            "$ref": "#/components/schemas/ServiceAccountTokenProjection"
          }
        },
        "description": "Projection that may be projected along with other supported volume types"
      },
      "VolumeSource": {
        "type": "object",
        "properties": {
          "hostPath": {
            "$ref": "#/components/schemas/HostPathVolumeSource"
          },
          "emptyDir": {
            "$ref": "#/components/schemas/EmptyDirVolumeSource"
          },
          "gcePersistentDisk": {
            "$ref": "#/components/schemas/GCEPersistentDiskVolumeSource"
          },
          "awsElasticBlockStore": {
            "$ref": "#/components/schemas/AWSElasticBlockStoreVolumeSource"
          },
          "gitRepo": {
            "$ref": "#/components/schemas/GitRepoVolumeSource"
          },
          "secret": {
            "$ref": "#/components/schemas/SecretVolumeSource"
          },
          "nfs": {
            "$ref": "#/components/schemas/NFSVolumeSource"
          },
          "iscsi": {
            "$ref": "#/components/schemas/ISCSIVolumeSource"
          },
          "glusterfs": {
            "$ref": "#/components/schemas/GlusterfsVolumeSource"
          },
          "persistentVolumeClaim": {
            "$ref": "#/components/schemas/PersistentVolumeClaimVolumeSource"
          },
          "rbd": {
            "$ref": "#/components/schemas/RBDVolumeSource"
          },
          "flexVolume": {
            "$ref": "#/components/schemas/FlexVolumeSource"
          },
          "cinder": {
            "$ref": "#/components/schemas/CinderVolumeSource"
          },
          "cephfs": {
            "$ref": "#/components/schemas/CephFSVolumeSource"
          },
          "flocker": {
            "$ref": "#/components/schemas/FlockerVolumeSource"
          },
          "downwardAPI": {
            "$ref": "#/components/schemas/DownwardAPIVolumeSource"
          },
          "fc": {
            "$ref": "#/components/schemas/FCVolumeSource"
          },
          "azureFile": {
            "$ref": "#/components/schemas/AzureFileVolumeSource"
          },
          "configMap": {
            "$ref": "#/components/schemas/ConfigMapVolumeSource"
          },
          "vsphereVolume": {
            "$ref": "#/components/schemas/VsphereVirtualDiskVolumeSource"
          },
          "quobyte": {
            "$ref": "#/components/schemas/QuobyteVolumeSource"
          },
          "azureDisk": {
            "$ref": "#/components/schemas/AzureDiskVolumeSource"
          },
          "photonPersistentDisk": {
            "$ref": "#/components/schemas/PhotonPersistentDiskVolumeSource"
          },
          "projected": {
            "$ref": "#/components/schemas/ProjectedVolumeSource"
          },
          "portworxVolume": {
            "$ref": "#/components/schemas/PortworxVolumeSource"
          },
          "scaleIO": {
            "$ref": "#/components/schemas/ScaleIOVolumeSource"
          },
          "storageos": {
            "$ref": "#/components/schemas/StorageOSVolumeSource"
          },
          "csi": {
            "$ref": "#/components/schemas/CSIVolumeSource"
          },
          "ephemeral": {
            "$ref": "#/components/schemas/EphemeralVolumeSource"
          }
        },
        "description": "Represents the source of a volume to mount. Only one of its members may be specified."
      },
      "VsphereVirtualDiskVolumeSource": {
        "type": "object",
        "properties": {
          "volumePath": {
            "type": "string",
            "description": "Path that identifies vSphere volume vmdk"
          },
          "fsType": {
            "type": "string",
            "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. +optional"
          },
          "storagePolicyName": {
            "type": "string",
            "description": "Storage Policy Based Management (SPBM) profile name. +optional"
          },
          "storagePolicyID": {
            "type": "string",
            "description": "Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName. +optional"
          }
        },
        "description": "Represents a vSphere volume resource."
      },
      "WeightedPodAffinityTerm": {
        "type": "object",
        "properties": {
          "weight": {
            "type": "integer",
            "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
            "format": "int32"
          },
          "podAffinityTerm": {
            "$ref": "#/components/schemas/PodAffinityTerm"
          }
        },
        "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)"
      },
      "WindowsSecurityContextOptions": {
        "type": "object",
        "properties": {
          "gmsaCredentialSpecName": {
            "type": "string",
            "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use. +optional"
          },
          "gmsaCredentialSpec": {
            "type": "string",
            "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field. +optional"
          },
          "runAsUserName": {
            "type": "string",
            "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. +optional"
          },
          "hostProcess": {
            "type": "boolean",
            "description": "HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true. +optional"
          }
        },
        "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials."
      },
      "Workflow": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/ObjectMeta"
          },
          "spec": {
            "$ref": "#/components/schemas/WorkflowSpec"
          },
          "status": {
            "$ref": "#/components/schemas/WorkflowStatus"
          }
        },
        "description": "Workflow is the definition of a workflow resource +genclient +genclient:noStatus +kubebuilder:resource:shortName=wf +kubebuilder:printcolumn:name=\"Status\",type=\"string\",JSONPath=\".status.phase\",description=\"Status of the workflow\" +kubebuilder:printcolumn:name=\"Age\",type=\"date\",format=\"date-time\",JSONPath=\".status.startedAt\",description=\"When the workflow was started\" +kubebuilder:printcolumn:name=\"Message\",type=\"string\",JSONPath=\".status.message\",description=\"Human readable message indicating details about why the workflow is in this condition.\" +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object"
      },
      "WorkflowMetadata": {
        "type": "object",
        "properties": {
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "annotations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "labelsFrom": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/LabelValueFrom"
            }
          }
        }
      },
      "WorkflowSpec": {
        "type": "object",
        "properties": {
          "templates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Template"
            },
            "description": "Templates is a list of workflow templates used in a workflow +patchStrategy=merge +patchMergeKey=name"
          },
          "entrypoint": {
            "type": "string",
            "description": "Entrypoint is a template reference to the starting point of the workflow."
          },
          "arguments": {
            "$ref": "#/components/schemas/Arguments"
          },
          "serviceAccountName": {
            "type": "string",
            "description": "ServiceAccountName is the name of the ServiceAccount to run all pods of the workflow as."
          },
          "automountServiceAccountToken": {
            "type": "boolean",
            "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in pods. ServiceAccountName of ExecutorConfig must be specified if this value is false."
          },
          "executor": {
            "$ref": "#/components/schemas/ExecutorConfig"
          },
          "volumes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Volume"
            },
            "description": "Volumes is a list of volumes that can be mounted by containers in a workflow. +patchStrategy=merge +patchMergeKey=name"
          },
          "volumeClaimTemplates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersistentVolumeClaim"
            },
            "description": "VolumeClaimTemplates is a list of claims that containers are allowed to reference. The Workflow controller will create the claims at the beginning of the workflow and delete the claims upon completion of the workflow +patchStrategy=merge +patchMergeKey=name"
          },
          "parallelism": {
            "type": "integer",
            "description": "Parallelism limits the max total parallel pods that can execute at the same time in a workflow",
            "format": "int64"
          },
          "artifactRepositoryRef": {
            "$ref": "#/components/schemas/ArtifactRepositoryRef"
          },
          "suspend": {
            "type": "boolean",
            "description": "Suspend will suspend the workflow and prevent execution of any future steps in the workflow"
          },
          "nodeSelector": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "NodeSelector is a selector which will result in all pods of the workflow to be scheduled on the selected node(s). This is able to be overridden by a nodeSelector specified in the template."
          },
          "affinity": {
            "$ref": "#/components/schemas/Affinity"
          },
          "tolerations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Toleration"
            },
            "description": "Tolerations to apply to workflow pods. +patchStrategy=merge +patchMergeKey=key"
          },
          "imagePullSecrets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalObjectReference"
            },
            "description": "ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod +patchStrategy=merge +patchMergeKey=name"
          },
          "hostNetwork": {
            "type": "boolean",
            "description": "Host networking requested for this workflow pod. Default to false."
          },
          "dnsPolicy": {
            "type": "string",
            "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'."
          },
          "dnsConfig": {
            "$ref": "#/components/schemas/PodDNSConfig"
          },
          "onExit": {
            "type": "string",
            "description": "OnExit is a template reference which is invoked at the end of the workflow, irrespective of the success, failure, or error of the primary workflow."
          },
          "ttlStrategy": {
            "$ref": "#/components/schemas/TTLStrategy"
          },
          "activeDeadlineSeconds": {
            "type": "integer",
            "description": "Optional duration in seconds relative to the workflow start time which the workflow is allowed to run before the controller terminates the workflow. A value of zero is used to terminate a Running workflow",
            "format": "int64"
          },
          "priority": {
            "type": "integer",
            "description": "Priority is used if controller is configured to process limited number of workflows in parallel. Workflows with higher priority are processed first.",
            "format": "int32"
          },
          "schedulerName": {
            "type": "string",
            "description": "Set scheduler name for all pods. Will be overridden if container/script template's scheduler name is set. Default scheduler will be used if neither specified. +optional"
          },
          "podGC": {
            "$ref": "#/components/schemas/PodGC"
          },
          "podPriorityClassName": {
            "type": "string",
            "description": "PriorityClassName to apply to workflow pods."
          },
          "podPriority": {
            "type": "integer",
            "description": "Priority to apply to workflow pods.",
            "format": "int32"
          },
          "hostAliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HostAlias"
            },
            "description": "+patchStrategy=merge +patchMergeKey=ip"
          },
          "securityContext": {
            "$ref": "#/components/schemas/PodSecurityContext"
          },
          "podSpecPatch": {
            "type": "string",
            "description": "PodSpecPatch holds strategic merge patch to apply against the pod spec. Allows parameterization of container fields which are not strings (e.g. resource limits)."
          },
          "podDisruptionBudget": {
            "$ref": "#/components/schemas/PodDisruptionBudgetSpec"
          },
          "metrics": {
            "$ref": "#/components/schemas/Metrics"
          },
          "shutdown": {
            "type": "string",
            "description": "Shutdown will shutdown the workflow according to its ShutdownStrategy"
          },
          "workflowTemplateRef": {
            "$ref": "#/components/schemas/WorkflowTemplateRef"
          },
          "synchronization": {
            "$ref": "#/components/schemas/Synchronization"
          },
          "volumeClaimGC": {
            "$ref": "#/components/schemas/VolumeClaimGC"
          },
          "retryStrategy": {
            "$ref": "#/components/schemas/RetryStrategy"
          },
          "podMetadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "templateDefaults": {
            "$ref": "#/components/schemas/Template"
          },
          "archiveLogs": {
            "type": "boolean",
            "description": "ArchiveLogs indicates if the container logs should be archived"
          },
          "hooks": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/LifecycleHook"
            },
            "description": "Hooks holds the lifecycle hook which is invoked at lifecycle of step, irrespective of the success, failure, or error status of the primary step"
          },
          "workflowMetadata": {
            "$ref": "#/components/schemas/WorkflowMetadata"
          },
          "artifactGC": {
            "$ref": "#/components/schemas/ArtifactGC"
          }
        },
        "description": "WorkflowSpec is the specification of a Workflow."
      },
      "WorkflowStatus": {
        "type": "object",
        "properties": {
          "phase": {
            "type": "string",
            "description": "Phase a simple, high-level summary of where the workflow is in its lifecycle."
          },
          "startedAt": {
            "type": "string",
            "description": "Time at which this workflow started",
            "format": "date-time"
          },
          "finishedAt": {
            "type": "string",
            "description": "Time at which this workflow completed",
            "format": "date-time"
          },
          "estimatedDuration": {
            "type": "integer",
            "description": "EstimatedDuration in seconds.",
            "format": "int64"
          },
          "progress": {
            "type": "string",
            "description": "Progress to completion"
          },
          "message": {
            "type": "string",
            "description": "A human readable message indicating details about why the workflow is in this condition."
          },
          "compressedNodes": {
            "type": "string",
            "description": "Compressed and base64 decoded Nodes map"
          },
          "nodes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/NodeStatus"
            },
            "description": "Nodes is a mapping between a node ID and the node's status."
          },
          "offloadNodeStatusVersion": {
            "type": "string",
            "description": "Whether on not node status has been offloaded to a database. If exists, then Nodes and CompressedNodes will be empty. This will actually be populated with a hash of the offloaded data."
          },
          "storedTemplates": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Template"
            },
            "description": "StoredTemplates is a mapping between a template ref and the node's status."
          },
          "persistentVolumeClaims": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Volume"
            },
            "description": "PersistentVolumeClaims tracks all PVCs that were created as part of the workflow. The contents of this list are drained at the end of the workflow."
          },
          "outputs": {
            "$ref": "#/components/schemas/Outputs"
          },
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Condition"
            },
            "description": "Conditions is a list of conditions the Workflow may have"
          },
          "resourcesDuration": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            },
            "description": "ResourcesDuration is the total for the workflow"
          },
          "storedWorkflowTemplateSpec": {
            "$ref": "#/components/schemas/WorkflowSpec"
          },
          "synchronization": {
            "$ref": "#/components/schemas/SynchronizationStatus"
          },
          "artifactRepositoryRef": {
            "$ref": "#/components/schemas/ArtifactRepositoryRefStatus"
          }
        },
        "description": "WorkflowStatus contains overall status information about a workflow"
      },
      "WorkflowStep": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the step"
          },
          "template": {
            "type": "string",
            "description": "Template is the name of the template to execute as the step"
          },
          "inline": {
            "$ref": "#/components/schemas/Template"
          },
          "arguments": {
            "$ref": "#/components/schemas/Arguments"
          },
          "templateRef": {
            "$ref": "#/components/schemas/TemplateRef"
          },
          "withItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "description": "WithItems expands a step into multiple parallel steps from the items in the list"
          },
          "withParam": {
            "type": "string",
            "description": "WithParam expands a step into multiple parallel steps from the value in the parameter, which is expected to be a JSON list."
          },
          "withSequence": {
            "$ref": "#/components/schemas/Sequence"
          },
          "when": {
            "type": "string",
            "description": "When is an expression in which the step should conditionally execute"
          },
          "continueOn": {
            "$ref": "#/components/schemas/ContinueOn"
          },
          "onExit": {
            "type": "string",
            "description": "OnExit is a template reference which is invoked at the end of the template, irrespective of the success, failure, or error of the primary template. DEPRECATED: Use Hooks[exit].Template instead."
          },
          "hooks": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/LifecycleHook"
            },
            "description": "Hooks holds the lifecycle hook which is invoked at lifecycle of step, irrespective of the success, failure, or error status of the primary step"
          }
        },
        "description": "WorkflowStep is a reference to a template to execute in a series of step"
      },
      "WorkflowTemplateRef": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name is the resource name of the workflow template."
          },
          "clusterScope": {
            "type": "boolean",
            "description": "ClusterScope indicates the referred template is cluster scoped (i.e. a ClusterWorkflowTemplate)."
          }
        },
        "description": "WorkflowTemplateRef is a reference to a WorkflowTemplate resource."
      },
      "ZipStrategy": {
        "type": "object",
        "properties": {},
        "description": "ZipStrategy will unzip zipped input artifacts"
      }
    }
  },
  "tags": [
    {
      "name": "BlobService",
      "description": "Service for interacting with Blobs."
    },
    {
      "name": "DeviceService",
      "description": "Service for interacting with devices."
    },
    {
      "name": "EventService",
      "description": "Service for interacting with v2 events."
    },
    {
      "name": "FileService",
      "description": "Service for interacting with Files."
    },
    {
      "name": "RecordService",
      "description": "Service for interacting with records."
    },
    {
      "name": "RevisionService",
      "description": "Service for interacting with revisions."
    },
    {
      "name": "TagService",
      "description": "Service for interacting with tags."
    },
    {
      "name": "TaskService",
      "description": "Service for interacting with tasks."
    }
  ]
}